// Generated from PScriptParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import PScriptParserVisitor from './PScriptParserVisitor.js';

import PScriptParserBase from './PScriptParserBase.js';

const serializedATN = [4,1,130,1095,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,1,0,3,0,174,8,0,1,0,3,0,177,8,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,203,8,2,
1,3,1,3,3,3,207,8,3,1,3,1,3,1,4,4,4,212,8,4,11,4,12,4,213,1,5,1,5,1,5,1,
6,3,6,220,8,6,1,6,1,6,3,6,224,8,6,1,6,1,6,1,6,1,6,1,6,3,6,231,8,6,1,7,1,
7,1,7,1,7,5,7,237,8,7,10,7,12,7,240,9,7,1,7,1,7,3,7,244,8,7,3,7,246,8,7,
1,7,1,7,1,8,1,8,1,8,3,8,253,8,8,1,9,1,9,3,9,257,8,9,1,10,1,10,1,11,1,11,
1,11,1,12,1,12,3,12,266,8,12,1,12,1,12,3,12,270,8,12,1,13,1,13,1,13,1,14,
1,14,1,14,3,14,278,8,14,1,15,1,15,3,15,282,8,15,1,15,1,15,3,15,286,8,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,295,8,15,1,16,1,16,1,16,1,16,1,16,
1,16,3,16,303,8,16,1,16,1,16,3,16,307,8,16,1,17,1,17,1,17,1,17,5,17,313,
8,17,10,17,12,17,316,9,17,1,17,1,17,3,17,320,8,17,3,17,322,8,17,1,17,1,17,
1,18,1,18,1,18,3,18,329,8,18,1,19,1,19,1,19,3,19,334,8,19,1,20,1,20,1,20,
1,21,1,21,1,21,1,21,5,21,343,8,21,10,21,12,21,346,9,21,1,22,1,22,1,22,3,
22,351,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,3,25,366,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,386,8,26,1,26,1,26,3,26,390,8,26,
1,26,1,26,3,26,394,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,402,8,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,3,26,411,8,26,1,26,1,26,1,26,3,26,416,8,26,
1,26,1,26,1,26,1,26,1,26,3,26,423,8,26,1,27,1,27,1,27,3,27,428,8,27,1,28,
1,28,1,28,3,28,433,8,28,1,28,1,28,1,29,1,29,1,29,3,29,440,8,29,1,29,1,29,
1,30,1,30,1,30,3,30,447,8,30,1,30,1,30,1,31,1,31,1,31,3,31,454,8,31,1,31,
1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,
34,3,34,472,8,34,1,34,1,34,3,34,476,8,34,3,34,478,8,34,1,34,1,34,1,35,4,
35,483,8,35,11,35,12,35,484,1,36,1,36,1,36,1,36,3,36,491,8,36,1,37,1,37,
1,37,3,37,496,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
1,40,1,40,3,40,511,8,40,1,40,3,40,514,8,40,1,41,1,41,1,41,3,41,519,8,41,
1,41,3,41,522,8,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,3,44,533,
8,44,1,44,1,44,3,44,537,8,44,1,44,1,44,1,44,3,44,542,8,44,1,44,1,44,1,44,
1,45,1,45,1,45,1,45,1,46,1,46,3,46,553,8,46,1,46,1,46,5,46,557,8,46,10,46,
12,46,560,9,46,1,46,1,46,1,47,1,47,1,47,3,47,567,8,47,1,47,1,47,1,47,1,47,
3,47,573,8,47,1,47,1,47,1,47,1,47,3,47,579,8,47,1,47,1,47,3,47,583,8,47,
1,48,1,48,3,48,587,8,48,1,48,3,48,590,8,48,1,48,1,48,1,48,3,48,595,8,48,
1,48,1,48,1,48,1,48,3,48,601,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,609,
8,48,1,48,1,48,1,48,3,48,614,8,48,1,48,1,48,1,48,3,48,619,8,48,1,49,1,49,
3,49,623,8,49,1,50,1,50,3,50,627,8,50,1,51,1,51,1,51,1,52,1,52,1,52,5,52,
635,8,52,10,52,12,52,638,9,52,1,52,1,52,3,52,642,8,52,1,52,3,52,645,8,52,
1,53,1,53,1,53,3,53,650,8,53,1,54,1,54,1,54,1,55,1,55,3,55,657,8,55,1,55,
1,55,1,56,4,56,662,8,56,11,56,12,56,663,1,57,1,57,1,57,1,57,1,58,5,58,671,
8,58,10,58,12,58,674,9,58,1,58,3,58,677,8,58,1,58,4,58,680,8,58,11,58,12,
58,681,1,58,5,58,685,8,58,10,58,12,58,688,9,58,1,58,5,58,691,8,58,10,58,
12,58,694,9,58,1,59,3,59,697,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,
1,60,1,60,1,60,1,60,1,60,3,60,712,8,60,1,60,3,60,715,8,60,1,60,1,60,1,60,
3,60,720,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
1,60,1,60,1,60,3,60,737,8,60,1,60,3,60,740,8,60,1,61,1,61,1,61,1,61,1,61,
1,61,1,61,3,61,749,8,61,1,62,1,62,1,62,1,62,5,62,755,8,62,10,62,12,62,758,
9,62,1,62,3,62,761,8,62,3,62,763,8,62,1,62,1,62,1,63,3,63,768,8,63,1,63,
1,63,3,63,772,8,63,1,64,1,64,1,64,5,64,777,8,64,10,64,12,64,780,9,64,1,65,
1,65,1,65,1,65,3,65,786,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,838,8,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,3,65,900,8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,908,8,65,1,65,
1,65,3,65,912,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
5,65,925,8,65,10,65,12,65,928,9,65,1,66,1,66,1,66,1,67,1,67,1,67,3,67,936,
8,67,1,68,1,68,1,68,1,68,5,68,942,8,68,10,68,12,68,945,9,68,1,68,3,68,948,
8,68,3,68,950,8,68,1,68,1,68,1,69,3,69,955,8,69,1,69,1,69,3,69,959,8,69,
1,69,1,69,3,69,963,8,69,1,69,1,69,1,69,3,69,968,8,69,1,69,1,69,1,69,1,69,
3,69,974,8,69,1,70,1,70,1,70,3,70,979,8,70,1,70,3,70,982,8,70,1,71,1,71,
3,71,986,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,997,8,73,
1,74,1,74,5,74,1001,8,74,10,74,12,74,1004,9,74,1,74,1,74,1,75,1,75,1,75,
1,75,1,75,3,75,1013,8,75,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,
79,1,79,1,79,1,80,1,80,3,80,1029,8,80,1,81,1,81,1,82,1,82,1,82,3,82,1036,
8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
83,1,83,1,83,1,83,1,83,3,83,1085,8,83,1,84,1,84,1,85,1,85,1,85,1,85,3,85,
1093,8,85,1,85,0,1,130,86,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,0,11,2,0,110,111,121,121,1,0,26,28,1,0,22,23,1,0,
32,34,1,0,35,38,1,0,39,42,1,0,48,60,1,0,64,68,1,0,69,72,5,0,99,101,109,109,
111,111,114,114,121,121,1,0,113,114,1261,0,173,1,0,0,0,2,180,1,0,0,0,4,202,
1,0,0,0,6,204,1,0,0,0,8,211,1,0,0,0,10,215,1,0,0,0,12,230,1,0,0,0,14,232,
1,0,0,0,16,249,1,0,0,0,18,256,1,0,0,0,20,258,1,0,0,0,22,260,1,0,0,0,24,265,
1,0,0,0,26,271,1,0,0,0,28,274,1,0,0,0,30,294,1,0,0,0,32,306,1,0,0,0,34,308,
1,0,0,0,36,325,1,0,0,0,38,333,1,0,0,0,40,335,1,0,0,0,42,338,1,0,0,0,44,347,
1,0,0,0,46,352,1,0,0,0,48,354,1,0,0,0,50,358,1,0,0,0,52,422,1,0,0,0,54,427,
1,0,0,0,56,429,1,0,0,0,58,436,1,0,0,0,60,443,1,0,0,0,62,450,1,0,0,0,64,457,
1,0,0,0,66,463,1,0,0,0,68,469,1,0,0,0,70,482,1,0,0,0,72,486,1,0,0,0,74,492,
1,0,0,0,76,497,1,0,0,0,78,501,1,0,0,0,80,506,1,0,0,0,82,515,1,0,0,0,84,525,
1,0,0,0,86,528,1,0,0,0,88,532,1,0,0,0,90,546,1,0,0,0,92,552,1,0,0,0,94,582,
1,0,0,0,96,618,1,0,0,0,98,620,1,0,0,0,100,626,1,0,0,0,102,628,1,0,0,0,104,
644,1,0,0,0,106,646,1,0,0,0,108,651,1,0,0,0,110,654,1,0,0,0,112,661,1,0,
0,0,114,665,1,0,0,0,116,672,1,0,0,0,118,696,1,0,0,0,120,739,1,0,0,0,122,
748,1,0,0,0,124,750,1,0,0,0,126,767,1,0,0,0,128,773,1,0,0,0,130,837,1,0,
0,0,132,929,1,0,0,0,134,935,1,0,0,0,136,937,1,0,0,0,138,973,1,0,0,0,140,
981,1,0,0,0,142,985,1,0,0,0,144,987,1,0,0,0,146,996,1,0,0,0,148,998,1,0,
0,0,150,1012,1,0,0,0,152,1014,1,0,0,0,154,1016,1,0,0,0,156,1018,1,0,0,0,
158,1022,1,0,0,0,160,1028,1,0,0,0,162,1030,1,0,0,0,164,1035,1,0,0,0,166,
1084,1,0,0,0,168,1086,1,0,0,0,170,1092,1,0,0,0,172,174,5,1,0,0,173,172,1,
0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,177,3,112,56,0,176,175,1,0,0,0,
176,177,1,0,0,0,177,178,1,0,0,0,178,179,5,0,0,1,179,1,1,0,0,0,180,181,3,
4,2,0,181,3,1,0,0,0,182,203,3,6,3,0,183,203,3,40,20,0,184,203,3,10,5,0,185,
203,3,30,15,0,186,203,3,46,23,0,187,203,3,90,45,0,188,203,3,88,44,0,189,
203,3,48,24,0,190,203,3,50,25,0,191,203,3,52,26,0,192,203,3,56,28,0,193,
203,3,58,29,0,194,203,3,60,30,0,195,203,3,62,31,0,196,203,3,64,32,0,197,
203,3,76,38,0,198,203,3,66,33,0,199,203,3,78,39,0,200,203,3,80,40,0,201,
203,3,86,43,0,202,182,1,0,0,0,202,183,1,0,0,0,202,184,1,0,0,0,202,185,1,
0,0,0,202,186,1,0,0,0,202,187,1,0,0,0,202,188,1,0,0,0,202,189,1,0,0,0,202,
190,1,0,0,0,202,191,1,0,0,0,202,192,1,0,0,0,202,193,1,0,0,0,202,194,1,0,
0,0,202,195,1,0,0,0,202,196,1,0,0,0,202,197,1,0,0,0,202,198,1,0,0,0,202,
199,1,0,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,5,1,0,0,0,204,206,5,9,0,
0,205,207,3,8,4,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,
5,11,0,0,209,7,1,0,0,0,210,212,3,4,2,0,211,210,1,0,0,0,212,213,1,0,0,0,213,
211,1,0,0,0,213,214,1,0,0,0,214,9,1,0,0,0,215,216,5,108,0,0,216,217,3,12,
6,0,217,11,1,0,0,0,218,220,3,22,11,0,219,218,1,0,0,0,219,220,1,0,0,0,220,
223,1,0,0,0,221,224,3,24,12,0,222,224,3,14,7,0,223,221,1,0,0,0,223,222,1,
0,0,0,224,225,1,0,0,0,225,226,3,26,13,0,226,227,3,170,85,0,227,231,1,0,0,
0,228,229,5,122,0,0,229,231,3,170,85,0,230,219,1,0,0,0,230,228,1,0,0,0,231,
13,1,0,0,0,232,238,5,9,0,0,233,234,3,16,8,0,234,235,5,13,0,0,235,237,1,0,
0,0,236,233,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,
245,1,0,0,0,240,238,1,0,0,0,241,243,3,16,8,0,242,244,5,13,0,0,243,242,1,
0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,241,1,0,0,0,245,246,1,0,0,0,246,
247,1,0,0,0,247,248,5,11,0,0,248,15,1,0,0,0,249,252,3,18,9,0,250,251,5,99,
0,0,251,253,3,20,10,0,252,250,1,0,0,0,252,253,1,0,0,0,253,17,1,0,0,0,254,
257,3,160,80,0,255,257,5,122,0,0,256,254,1,0,0,0,256,255,1,0,0,0,257,19,
1,0,0,0,258,259,7,0,0,0,259,21,1,0,0,0,260,261,3,28,14,0,261,262,5,13,0,
0,262,23,1,0,0,0,263,266,5,26,0,0,264,266,3,160,80,0,265,263,1,0,0,0,265,
264,1,0,0,0,266,269,1,0,0,0,267,268,5,99,0,0,268,270,3,160,80,0,269,267,
1,0,0,0,269,270,1,0,0,0,270,25,1,0,0,0,271,272,5,100,0,0,272,273,5,122,0,
0,273,27,1,0,0,0,274,277,3,160,80,0,275,276,5,99,0,0,276,278,3,160,80,0,
277,275,1,0,0,0,277,278,1,0,0,0,278,29,1,0,0,0,279,281,5,107,0,0,280,282,
5,93,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,285,1,0,0,0,283,286,3,32,16,
0,284,286,3,38,19,0,285,283,1,0,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,
288,3,170,85,0,288,295,1,0,0,0,289,290,5,107,0,0,290,291,5,93,0,0,291,292,
3,130,65,0,292,293,3,170,85,0,293,295,1,0,0,0,294,279,1,0,0,0,294,289,1,
0,0,0,295,31,1,0,0,0,296,297,3,24,12,0,297,298,3,26,13,0,298,299,3,170,85,
0,299,307,1,0,0,0,300,302,3,34,17,0,301,303,3,26,13,0,302,301,1,0,0,0,302,
303,1,0,0,0,303,304,1,0,0,0,304,305,3,170,85,0,305,307,1,0,0,0,306,296,1,
0,0,0,306,300,1,0,0,0,307,33,1,0,0,0,308,314,5,9,0,0,309,310,3,36,18,0,310,
311,5,13,0,0,311,313,1,0,0,0,312,309,1,0,0,0,313,316,1,0,0,0,314,312,1,0,
0,0,314,315,1,0,0,0,315,321,1,0,0,0,316,314,1,0,0,0,317,319,3,36,18,0,318,
320,5,13,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,317,1,0,
0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,11,0,0,324,35,1,0,0,0,325,
328,3,18,9,0,326,327,5,99,0,0,327,329,3,18,9,0,328,326,1,0,0,0,328,329,1,
0,0,0,329,37,1,0,0,0,330,334,3,40,20,0,331,334,3,90,45,0,332,334,3,88,44,
0,333,330,1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,39,1,0,0,0,335,336,
3,42,21,0,336,337,3,170,85,0,337,41,1,0,0,0,338,339,3,54,27,0,339,344,3,
44,22,0,340,341,5,13,0,0,341,343,3,44,22,0,342,340,1,0,0,0,343,346,1,0,0,
0,344,342,1,0,0,0,344,345,1,0,0,0,345,43,1,0,0,0,346,344,1,0,0,0,347,350,
3,134,67,0,348,349,5,14,0,0,349,351,3,130,65,0,350,348,1,0,0,0,350,351,1,
0,0,0,351,45,1,0,0,0,352,353,5,12,0,0,353,47,1,0,0,0,354,355,4,24,0,0,355,
356,3,128,64,0,356,357,3,170,85,0,357,49,1,0,0,0,358,359,5,94,0,0,359,360,
5,7,0,0,360,361,3,128,64,0,361,362,5,8,0,0,362,365,3,4,2,0,363,364,5,78,
0,0,364,366,3,4,2,0,365,363,1,0,0,0,365,366,1,0,0,0,366,51,1,0,0,0,367,368,
5,74,0,0,368,369,3,4,2,0,369,370,5,88,0,0,370,371,5,7,0,0,371,372,3,128,
64,0,372,373,5,8,0,0,373,374,3,170,85,0,374,423,1,0,0,0,375,376,5,88,0,0,
376,377,5,7,0,0,377,378,3,128,64,0,378,379,5,8,0,0,379,380,3,4,2,0,380,423,
1,0,0,0,381,382,5,86,0,0,382,385,5,7,0,0,383,386,3,128,64,0,384,386,3,42,
21,0,385,383,1,0,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,
389,5,12,0,0,388,390,3,128,64,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,
1,0,0,0,391,393,5,12,0,0,392,394,3,128,64,0,393,392,1,0,0,0,393,394,1,0,
0,0,394,395,1,0,0,0,395,396,5,8,0,0,396,423,3,4,2,0,397,398,5,86,0,0,398,
401,5,7,0,0,399,402,3,130,65,0,400,402,3,42,21,0,401,399,1,0,0,0,401,400,
1,0,0,0,402,403,1,0,0,0,403,404,5,97,0,0,404,405,3,128,64,0,405,406,5,8,
0,0,406,407,3,4,2,0,407,423,1,0,0,0,408,410,5,86,0,0,409,411,5,110,0,0,410,
409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,415,5,7,0,0,413,416,3,130,
65,0,414,416,3,42,21,0,415,413,1,0,0,0,415,414,1,0,0,0,416,417,1,0,0,0,417,
418,5,101,0,0,418,419,3,128,64,0,419,420,5,8,0,0,420,421,3,4,2,0,421,423,
1,0,0,0,422,367,1,0,0,0,422,375,1,0,0,0,422,381,1,0,0,0,422,397,1,0,0,0,
422,408,1,0,0,0,423,53,1,0,0,0,424,428,5,80,0,0,425,428,3,168,84,0,426,428,
5,106,0,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,1,0,0,0,428,55,1,0,0,0,
429,432,5,85,0,0,430,431,4,28,1,0,431,433,3,162,81,0,432,430,1,0,0,0,432,
433,1,0,0,0,433,434,1,0,0,0,434,435,3,170,85,0,435,57,1,0,0,0,436,439,5,
73,0,0,437,438,4,29,2,0,438,440,3,162,81,0,439,437,1,0,0,0,439,440,1,0,0,
0,440,441,1,0,0,0,441,442,3,170,85,0,442,59,1,0,0,0,443,446,5,83,0,0,444,
445,4,30,3,0,445,447,3,128,64,0,446,444,1,0,0,0,446,447,1,0,0,0,447,448,
1,0,0,0,448,449,3,170,85,0,449,61,1,0,0,0,450,453,5,111,0,0,451,452,4,31,
4,0,452,454,3,128,64,0,453,451,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,
456,3,170,85,0,456,63,1,0,0,0,457,458,5,92,0,0,458,459,5,7,0,0,459,460,3,
128,64,0,460,461,5,8,0,0,461,462,3,4,2,0,462,65,1,0,0,0,463,464,5,87,0,0,
464,465,5,7,0,0,465,466,3,128,64,0,466,467,5,8,0,0,467,468,3,68,34,0,468,
67,1,0,0,0,469,471,5,9,0,0,470,472,3,70,35,0,471,470,1,0,0,0,471,472,1,0,
0,0,472,477,1,0,0,0,473,475,3,74,37,0,474,476,3,70,35,0,475,474,1,0,0,0,
475,476,1,0,0,0,476,478,1,0,0,0,477,473,1,0,0,0,477,478,1,0,0,0,478,479,
1,0,0,0,479,480,5,11,0,0,480,69,1,0,0,0,481,483,3,72,36,0,482,481,1,0,0,
0,483,484,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,71,1,0,0,0,486,487,
5,77,0,0,487,488,3,128,64,0,488,490,5,17,0,0,489,491,3,8,4,0,490,489,1,0,
0,0,490,491,1,0,0,0,491,73,1,0,0,0,492,493,5,93,0,0,493,495,5,17,0,0,494,
496,3,8,4,0,495,494,1,0,0,0,495,496,1,0,0,0,496,75,1,0,0,0,497,498,3,162,
81,0,498,499,5,17,0,0,499,500,3,4,2,0,500,77,1,0,0,0,501,502,5,95,0,0,502,
503,4,39,5,0,503,504,3,128,64,0,504,505,3,170,85,0,505,79,1,0,0,0,506,507,
5,98,0,0,507,513,3,6,3,0,508,510,3,82,41,0,509,511,3,84,42,0,510,509,1,0,
0,0,510,511,1,0,0,0,511,514,1,0,0,0,512,514,3,84,42,0,513,508,1,0,0,0,513,
512,1,0,0,0,514,81,1,0,0,0,515,521,5,81,0,0,516,518,5,7,0,0,517,519,3,134,
67,0,518,517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,522,5,8,0,0,521,
516,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,3,6,3,0,524,83,1,0,0,
0,525,526,5,82,0,0,526,527,3,6,3,0,527,85,1,0,0,0,528,529,5,89,0,0,529,530,
3,170,85,0,530,87,1,0,0,0,531,533,5,109,0,0,532,531,1,0,0,0,532,533,1,0,
0,0,533,534,1,0,0,0,534,536,5,90,0,0,535,537,5,26,0,0,536,535,1,0,0,0,536,
537,1,0,0,0,537,538,1,0,0,0,538,539,3,162,81,0,539,541,5,7,0,0,540,542,3,
104,52,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,5,8,0,0,
544,545,3,110,55,0,545,89,1,0,0,0,546,547,5,102,0,0,547,548,3,162,81,0,548,
549,3,92,46,0,549,91,1,0,0,0,550,551,5,104,0,0,551,553,3,130,65,0,552,550,
1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,558,5,9,0,0,555,557,3,94,47,
0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,561,
1,0,0,0,560,558,1,0,0,0,561,562,5,11,0,0,562,93,1,0,0,0,563,567,5,120,0,
0,564,565,4,47,6,0,565,567,3,162,81,0,566,563,1,0,0,0,566,564,1,0,0,0,566,
567,1,0,0,0,567,568,1,0,0,0,568,583,3,96,48,0,569,573,5,120,0,0,570,571,
4,47,7,0,571,573,3,162,81,0,572,569,1,0,0,0,572,570,1,0,0,0,572,573,1,0,
0,0,573,574,1,0,0,0,574,583,3,98,49,0,575,579,5,120,0,0,576,577,4,47,8,0,
577,579,3,162,81,0,578,575,1,0,0,0,578,576,1,0,0,0,579,580,1,0,0,0,580,583,
3,6,3,0,581,583,3,46,23,0,582,566,1,0,0,0,582,572,1,0,0,0,582,578,1,0,0,
0,582,581,1,0,0,0,583,95,1,0,0,0,584,585,5,109,0,0,585,587,4,48,9,0,586,
584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,590,5,26,0,0,589,588,1,0,
0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,592,3,100,50,0,592,594,5,7,0,0,593,
595,3,104,52,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,
8,0,0,597,598,3,110,55,0,598,619,1,0,0,0,599,601,5,26,0,0,600,599,1,0,0,
0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,3,156,78,0,603,604,5,7,0,0,604,
605,5,8,0,0,605,606,3,110,55,0,606,619,1,0,0,0,607,609,5,26,0,0,608,607,
1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,3,158,79,0,611,613,5,7,0,
0,612,614,3,104,52,0,613,612,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,
616,5,8,0,0,616,617,3,110,55,0,617,619,1,0,0,0,618,586,1,0,0,0,618,600,1,
0,0,0,618,608,1,0,0,0,619,97,1,0,0,0,620,622,3,100,50,0,621,623,3,132,66,
0,622,621,1,0,0,0,622,623,1,0,0,0,623,99,1,0,0,0,624,627,3,122,61,0,625,
627,3,102,51,0,626,624,1,0,0,0,626,625,1,0,0,0,627,101,1,0,0,0,628,629,5,
31,0,0,629,630,3,160,80,0,630,103,1,0,0,0,631,636,3,106,53,0,632,633,5,13,
0,0,633,635,3,106,53,0,634,632,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,
637,1,0,0,0,637,641,1,0,0,0,638,636,1,0,0,0,639,640,5,13,0,0,640,642,3,108,
54,0,641,639,1,0,0,0,641,642,1,0,0,0,642,645,1,0,0,0,643,645,3,108,54,0,
644,631,1,0,0,0,644,643,1,0,0,0,645,105,1,0,0,0,646,649,3,134,67,0,647,648,
5,14,0,0,648,650,3,130,65,0,649,647,1,0,0,0,649,650,1,0,0,0,650,107,1,0,
0,0,651,652,5,18,0,0,652,653,3,130,65,0,653,109,1,0,0,0,654,656,5,9,0,0,
655,657,3,112,56,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,659,
5,11,0,0,659,111,1,0,0,0,660,662,3,2,1,0,661,660,1,0,0,0,662,663,1,0,0,0,
663,661,1,0,0,0,663,664,1,0,0,0,664,113,1,0,0,0,665,666,5,5,0,0,666,667,
3,116,58,0,667,668,5,6,0,0,668,115,1,0,0,0,669,671,5,13,0,0,670,669,1,0,
0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,676,1,0,0,0,674,
672,1,0,0,0,675,677,3,118,59,0,676,675,1,0,0,0,676,677,1,0,0,0,677,686,1,
0,0,0,678,680,5,13,0,0,679,678,1,0,0,0,680,681,1,0,0,0,681,679,1,0,0,0,681,
682,1,0,0,0,682,683,1,0,0,0,683,685,3,118,59,0,684,679,1,0,0,0,685,688,1,
0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,692,1,0,0,0,688,686,1,0,0,0,689,
691,5,13,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,
0,0,693,117,1,0,0,0,694,692,1,0,0,0,695,697,5,18,0,0,696,695,1,0,0,0,696,
697,1,0,0,0,697,698,1,0,0,0,698,699,3,130,65,0,699,119,1,0,0,0,700,701,3,
122,61,0,701,702,5,17,0,0,702,703,3,130,65,0,703,740,1,0,0,0,704,705,5,5,
0,0,705,706,3,130,65,0,706,707,5,6,0,0,707,708,5,17,0,0,708,709,3,130,65,
0,709,740,1,0,0,0,710,712,5,109,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,
714,1,0,0,0,713,715,5,26,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,
0,0,716,717,3,122,61,0,717,719,5,7,0,0,718,720,3,104,52,0,719,718,1,0,0,
0,719,720,1,0,0,0,720,721,1,0,0,0,721,722,5,8,0,0,722,723,3,110,55,0,723,
740,1,0,0,0,724,725,3,156,78,0,725,726,5,7,0,0,726,727,5,8,0,0,727,728,3,
110,55,0,728,740,1,0,0,0,729,730,3,158,79,0,730,731,5,7,0,0,731,732,3,106,
53,0,732,733,5,8,0,0,733,734,3,110,55,0,734,740,1,0,0,0,735,737,5,18,0,0,
736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,740,3,130,65,0,739,700,
1,0,0,0,739,704,1,0,0,0,739,711,1,0,0,0,739,724,1,0,0,0,739,729,1,0,0,0,
739,736,1,0,0,0,740,121,1,0,0,0,741,749,3,160,80,0,742,749,5,122,0,0,743,
749,3,152,76,0,744,745,5,5,0,0,745,746,3,130,65,0,746,747,5,6,0,0,747,749,
1,0,0,0,748,741,1,0,0,0,748,742,1,0,0,0,748,743,1,0,0,0,748,744,1,0,0,0,
749,123,1,0,0,0,750,762,5,7,0,0,751,756,3,126,63,0,752,753,5,13,0,0,753,
755,3,126,63,0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,
0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,759,761,5,13,0,0,760,759,1,0,0,0,760,
761,1,0,0,0,761,763,1,0,0,0,762,751,1,0,0,0,762,763,1,0,0,0,763,764,1,0,
0,0,764,765,5,8,0,0,765,125,1,0,0,0,766,768,5,18,0,0,767,766,1,0,0,0,767,
768,1,0,0,0,768,771,1,0,0,0,769,772,3,130,65,0,770,772,3,162,81,0,771,769,
1,0,0,0,771,770,1,0,0,0,772,127,1,0,0,0,773,778,3,130,65,0,774,775,5,13,
0,0,775,777,3,130,65,0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,
779,1,0,0,0,779,129,1,0,0,0,780,778,1,0,0,0,781,782,6,65,-1,0,782,838,3,
138,69,0,783,785,5,102,0,0,784,786,3,162,81,0,785,784,1,0,0,0,785,786,1,
0,0,0,786,787,1,0,0,0,787,838,3,92,46,0,788,789,5,79,0,0,789,790,3,162,81,
0,790,791,3,124,62,0,791,838,1,0,0,0,792,793,5,79,0,0,793,794,3,130,65,0,
794,795,3,124,62,0,795,838,1,0,0,0,796,797,5,79,0,0,797,838,3,130,65,42,
798,799,5,79,0,0,799,800,5,19,0,0,800,838,3,162,81,0,801,802,5,96,0,0,802,
838,3,130,65,37,803,804,5,84,0,0,804,838,3,130,65,36,805,806,5,76,0,0,806,
838,3,130,65,35,807,808,5,20,0,0,808,838,3,130,65,34,809,810,5,21,0,0,810,
838,3,130,65,33,811,812,5,22,0,0,812,838,3,130,65,32,813,814,5,23,0,0,814,
838,3,130,65,31,815,816,5,24,0,0,816,838,3,130,65,30,817,818,5,25,0,0,818,
838,3,130,65,29,819,820,5,110,0,0,820,838,3,130,65,28,821,822,5,108,0,0,
822,823,5,7,0,0,823,824,3,130,65,0,824,825,5,8,0,0,825,838,1,0,0,0,826,838,
3,62,31,0,827,838,5,91,0,0,828,838,3,162,81,0,829,838,5,105,0,0,830,838,
3,146,73,0,831,838,3,114,57,0,832,838,3,136,68,0,833,834,5,7,0,0,834,835,
3,128,64,0,835,836,5,8,0,0,836,838,1,0,0,0,837,781,1,0,0,0,837,783,1,0,0,
0,837,788,1,0,0,0,837,792,1,0,0,0,837,796,1,0,0,0,837,798,1,0,0,0,837,801,
1,0,0,0,837,803,1,0,0,0,837,805,1,0,0,0,837,807,1,0,0,0,837,809,1,0,0,0,
837,811,1,0,0,0,837,813,1,0,0,0,837,815,1,0,0,0,837,817,1,0,0,0,837,819,
1,0,0,0,837,821,1,0,0,0,837,826,1,0,0,0,837,827,1,0,0,0,837,828,1,0,0,0,
837,829,1,0,0,0,837,830,1,0,0,0,837,831,1,0,0,0,837,832,1,0,0,0,837,833,
1,0,0,0,838,926,1,0,0,0,839,840,10,47,0,0,840,841,5,16,0,0,841,925,3,130,
65,48,842,843,10,27,0,0,843,844,5,29,0,0,844,925,3,130,65,27,845,846,10,
26,0,0,846,847,7,1,0,0,847,925,3,130,65,27,848,849,10,25,0,0,849,850,7,2,
0,0,850,925,3,130,65,26,851,852,10,24,0,0,852,853,5,30,0,0,853,925,3,130,
65,25,854,855,10,23,0,0,855,856,7,3,0,0,856,925,3,130,65,24,857,858,10,22,
0,0,858,859,7,4,0,0,859,925,3,130,65,23,860,861,10,21,0,0,861,862,5,75,0,
0,862,925,3,130,65,22,863,864,10,20,0,0,864,865,5,97,0,0,865,925,3,130,65,
21,866,867,10,19,0,0,867,868,7,5,0,0,868,925,3,130,65,20,869,870,10,18,0,
0,870,871,5,43,0,0,871,925,3,130,65,19,872,873,10,17,0,0,873,874,5,44,0,
0,874,925,3,130,65,18,875,876,10,16,0,0,876,877,5,45,0,0,877,925,3,130,65,
17,878,879,10,15,0,0,879,880,5,46,0,0,880,925,3,130,65,16,881,882,10,14,
0,0,882,883,5,47,0,0,883,925,3,130,65,15,884,885,10,13,0,0,885,886,5,15,
0,0,886,887,3,130,65,0,887,888,5,17,0,0,888,889,3,130,65,14,889,925,1,0,
0,0,890,891,10,12,0,0,891,892,5,14,0,0,892,925,3,130,65,12,893,894,10,11,
0,0,894,895,3,144,72,0,895,896,3,130,65,11,896,925,1,0,0,0,897,899,10,46,
0,0,898,900,5,16,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,
902,5,5,0,0,902,903,3,128,64,0,903,904,5,6,0,0,904,925,1,0,0,0,905,907,10,
45,0,0,906,908,5,15,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,
909,911,5,19,0,0,910,912,5,31,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,
1,0,0,0,913,925,3,160,80,0,914,915,10,41,0,0,915,925,3,124,62,0,916,917,
10,39,0,0,917,918,4,65,32,0,918,925,5,20,0,0,919,920,10,38,0,0,920,921,4,
65,34,0,921,925,5,21,0,0,922,923,10,9,0,0,923,925,3,148,74,0,924,839,1,0,
0,0,924,842,1,0,0,0,924,845,1,0,0,0,924,848,1,0,0,0,924,851,1,0,0,0,924,
854,1,0,0,0,924,857,1,0,0,0,924,860,1,0,0,0,924,863,1,0,0,0,924,866,1,0,
0,0,924,869,1,0,0,0,924,872,1,0,0,0,924,875,1,0,0,0,924,878,1,0,0,0,924,
881,1,0,0,0,924,884,1,0,0,0,924,890,1,0,0,0,924,893,1,0,0,0,924,897,1,0,
0,0,924,905,1,0,0,0,924,914,1,0,0,0,924,916,1,0,0,0,924,919,1,0,0,0,924,
922,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,131,1,0,
0,0,928,926,1,0,0,0,929,930,5,14,0,0,930,931,3,130,65,0,931,133,1,0,0,0,
932,936,3,162,81,0,933,936,3,114,57,0,934,936,3,136,68,0,935,932,1,0,0,0,
935,933,1,0,0,0,935,934,1,0,0,0,936,135,1,0,0,0,937,949,5,9,0,0,938,943,
3,120,60,0,939,940,5,13,0,0,940,942,3,120,60,0,941,939,1,0,0,0,942,945,1,
0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,946,
948,5,13,0,0,947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,938,1,0,
0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,11,0,0,952,137,1,0,0,0,953,
955,5,109,0,0,954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,958,5,
90,0,0,957,959,5,26,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,
960,962,5,7,0,0,961,963,3,104,52,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,
1,0,0,0,964,965,5,8,0,0,965,974,3,110,55,0,966,968,5,109,0,0,967,966,1,0,
0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,970,3,140,70,0,970,971,5,61,0,0,
971,972,3,142,71,0,972,974,1,0,0,0,973,954,1,0,0,0,973,967,1,0,0,0,974,139,
1,0,0,0,975,982,3,162,81,0,976,978,5,7,0,0,977,979,3,104,52,0,978,977,1,
0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,982,5,8,0,0,981,975,1,0,0,0,981,
976,1,0,0,0,982,141,1,0,0,0,983,986,3,130,65,0,984,986,3,110,55,0,985,983,
1,0,0,0,985,984,1,0,0,0,986,143,1,0,0,0,987,988,7,6,0,0,988,145,1,0,0,0,
989,997,5,62,0,0,990,997,5,63,0,0,991,997,5,122,0,0,992,997,3,148,74,0,993,
997,5,4,0,0,994,997,3,152,76,0,995,997,3,154,77,0,996,989,1,0,0,0,996,990,
1,0,0,0,996,991,1,0,0,0,996,992,1,0,0,0,996,993,1,0,0,0,996,994,1,0,0,0,
996,995,1,0,0,0,997,147,1,0,0,0,998,1002,5,123,0,0,999,1001,3,150,75,0,1000,
999,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1005,
1,0,0,0,1004,1002,1,0,0,0,1005,1006,5,123,0,0,1006,149,1,0,0,0,1007,1013,
5,130,0,0,1008,1009,5,129,0,0,1009,1010,3,130,65,0,1010,1011,5,10,0,0,1011,
1013,1,0,0,0,1012,1007,1,0,0,0,1012,1008,1,0,0,0,1013,151,1,0,0,0,1014,1015,
7,7,0,0,1015,153,1,0,0,0,1016,1017,7,8,0,0,1017,155,1,0,0,0,1018,1019,4,
78,36,0,1019,1020,3,162,81,0,1020,1021,3,100,50,0,1021,157,1,0,0,0,1022,
1023,4,79,37,0,1023,1024,3,162,81,0,1024,1025,3,100,50,0,1025,159,1,0,0,
0,1026,1029,3,162,81,0,1027,1029,3,164,82,0,1028,1026,1,0,0,0,1028,1027,
1,0,0,0,1029,161,1,0,0,0,1030,1031,7,9,0,0,1031,163,1,0,0,0,1032,1036,3,
166,83,0,1033,1036,5,62,0,0,1034,1036,5,63,0,0,1035,1032,1,0,0,0,1035,1033,
1,0,0,0,1035,1034,1,0,0,0,1036,165,1,0,0,0,1037,1085,5,73,0,0,1038,1085,
5,74,0,0,1039,1085,5,75,0,0,1040,1085,5,76,0,0,1041,1085,5,77,0,0,1042,1085,
5,78,0,0,1043,1085,5,79,0,0,1044,1085,5,80,0,0,1045,1085,5,81,0,0,1046,1085,
5,82,0,0,1047,1085,5,83,0,0,1048,1085,5,84,0,0,1049,1085,5,85,0,0,1050,1085,
5,86,0,0,1051,1085,5,87,0,0,1052,1085,5,88,0,0,1053,1085,5,89,0,0,1054,1085,
5,90,0,0,1055,1085,5,91,0,0,1056,1085,5,92,0,0,1057,1085,5,93,0,0,1058,1085,
5,94,0,0,1059,1085,5,95,0,0,1060,1085,5,96,0,0,1061,1085,5,97,0,0,1062,1085,
5,98,0,0,1063,1085,5,102,0,0,1064,1085,5,103,0,0,1065,1085,5,104,0,0,1066,
1085,5,105,0,0,1067,1085,5,106,0,0,1068,1085,5,107,0,0,1069,1085,5,108,0,
0,1070,1085,5,112,0,0,1071,1085,3,168,84,0,1072,1085,5,115,0,0,1073,1085,
5,116,0,0,1074,1085,5,117,0,0,1075,1085,5,118,0,0,1076,1085,5,119,0,0,1077,
1085,5,120,0,0,1078,1085,5,111,0,0,1079,1085,5,109,0,0,1080,1085,5,110,0,
0,1081,1085,5,100,0,0,1082,1085,5,99,0,0,1083,1085,5,101,0,0,1084,1037,1,
0,0,0,1084,1038,1,0,0,0,1084,1039,1,0,0,0,1084,1040,1,0,0,0,1084,1041,1,
0,0,0,1084,1042,1,0,0,0,1084,1043,1,0,0,0,1084,1044,1,0,0,0,1084,1045,1,
0,0,0,1084,1046,1,0,0,0,1084,1047,1,0,0,0,1084,1048,1,0,0,0,1084,1049,1,
0,0,0,1084,1050,1,0,0,0,1084,1051,1,0,0,0,1084,1052,1,0,0,0,1084,1053,1,
0,0,0,1084,1054,1,0,0,0,1084,1055,1,0,0,0,1084,1056,1,0,0,0,1084,1057,1,
0,0,0,1084,1058,1,0,0,0,1084,1059,1,0,0,0,1084,1060,1,0,0,0,1084,1061,1,
0,0,0,1084,1062,1,0,0,0,1084,1063,1,0,0,0,1084,1064,1,0,0,0,1084,1065,1,
0,0,0,1084,1066,1,0,0,0,1084,1067,1,0,0,0,1084,1068,1,0,0,0,1084,1069,1,
0,0,0,1084,1070,1,0,0,0,1084,1071,1,0,0,0,1084,1072,1,0,0,0,1084,1073,1,
0,0,0,1084,1074,1,0,0,0,1084,1075,1,0,0,0,1084,1076,1,0,0,0,1084,1077,1,
0,0,0,1084,1078,1,0,0,0,1084,1079,1,0,0,0,1084,1080,1,0,0,0,1084,1081,1,
0,0,0,1084,1082,1,0,0,0,1084,1083,1,0,0,0,1085,167,1,0,0,0,1086,1087,7,10,
0,0,1087,169,1,0,0,0,1088,1093,5,12,0,0,1089,1093,5,0,0,1,1090,1093,4,85,
38,0,1091,1093,4,85,39,0,1092,1088,1,0,0,0,1092,1089,1,0,0,0,1092,1090,1,
0,0,0,1092,1091,1,0,0,0,1093,171,1,0,0,0,119,173,176,202,206,213,219,223,
230,238,243,245,252,256,265,269,277,281,285,294,302,306,314,319,321,328,
333,344,350,365,385,389,393,401,410,415,422,427,432,439,446,453,471,475,
477,484,490,495,510,513,518,521,532,536,541,552,558,566,572,578,582,586,
589,594,600,608,613,618,622,626,636,641,644,649,656,663,672,676,681,686,
692,696,711,714,719,736,739,748,756,760,762,767,771,778,785,837,899,907,
911,924,926,935,943,947,949,954,958,962,967,973,978,981,985,996,1002,1012,
1028,1035,1084,1092];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class PScriptParser extends PScriptParserBase {

    static grammarFileName = "PScriptParser.g4";
    static literalNames = [ null, null, null, null, null, "'['", "']'", 
                            "'('", "')'", "'{'", null, "'}'", "';'", "','", 
                            "'='", "'?'", "'?.'", "':'", "'...'", "'.'", 
                            "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                            "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", 
                            "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
                            "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", 
                            "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", 
                            "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
                            "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", 
                            "'null'", null, null, null, null, null, null, 
                            null, null, null, null, "'break'", "'do'", "'instanceof'", 
                            "'typeof'", "'case'", "'else'", "'new'", "'var'", 
                            "'catch'", "'finally'", "'return'", "'void'", 
                            "'continue'", "'for'", "'switch'", "'while'", 
                            "'debugger'", "'function'", "'this'", "'with'", 
                            "'default'", "'if'", "'throw'", "'delete'", 
                            "'in'", "'try'", "'as'", "'from'", "'of'", "'class'", 
                            "'enum'", "'extends'", "'super'", "'const'", 
                            "'export'", "'import'", "'async'", "'await'", 
                            "'yield'", "'implements'", null, null, "'private'", 
                            "'public'", "'interface'", "'package'", "'protected'", 
                            "'static'", null, null, null, null, null, null, 
                            null, null, "'${'" ];
    static symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment", 
                             "RegularExpressionLiteral", "OpenBracket", 
                             "CloseBracket", "OpenParen", "CloseParen", 
                             "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
                             "SemiColon", "Comma", "Assign", "QuestionMark", 
                             "QuestionMarkDot", "Colon", "Ellipsis", "Dot", 
                             "PlusPlus", "MinusMinus", "Plus", "Minus", 
                             "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                             "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                             "LeftShiftArithmetic", "RightShiftLogical", 
                             "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                             "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "PowerAssign", "NullishCoalescingAssign", "ARROW", 
                             "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
                             "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                             "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                             "Break", "Do", "Instanceof", "Typeof", "Case", 
                             "Else", "New", "Var", "Catch", "Finally", "Return", 
                             "Void", "Continue", "For", "Switch", "While", 
                             "Debugger", "Function_", "This", "With", "Default", 
                             "If", "Throw", "Delete", "In", "Try", "As", 
                             "From", "Of", "Class", "Enum", "Extends", "Super", 
                             "Const", "Export", "Import", "Async", "Await", 
                             "Yield", "Implements", "StrictLet", "NonStrictLet", 
                             "Private", "Public", "Interface", "Package", 
                             "Protected", "Static", "Identifier", "StringLiteral", 
                             "BackTick", "WhiteSpaces", "LineTerminator", 
                             "HtmlComment", "CDataComment", "UnexpectedCharacter", 
                             "TemplateStringStartExpression", "TemplateStringAtom" ];
    static ruleNames = [ "program", "sourceElement", "statement", "block", 
                         "statementList", "importStatement", "importFromBlock", 
                         "importModuleItems", "importAliasName", "moduleExportName", 
                         "importedBinding", "importDefault", "importNamespace", 
                         "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
                         "exportModuleItems", "exportAliasName", "declaration", 
                         "variableStatement", "variableDeclarationList", 
                         "variableDeclaration", "emptyStatement_", "expressionStatement", 
                         "ifStatement", "iterationStatement", "varModifier", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "yieldStatement", "withStatement", "switchStatement", 
                         "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                         "labelledStatement", "throwStatement", "tryStatement", 
                         "catchProduction", "finallyProduction", "debuggerStatement", 
                         "functionDeclaration", "classDeclaration", "classTail", 
                         "classElement", "methodDefinition", "fieldDefinition", 
                         "classElementName", "privateIdentifier", "formalParameterList", 
                         "formalParameterArg", "lastFormalParameterArg", 
                         "functionBody", "sourceElements", "arrayLiteral", 
                         "elementList", "arrayElement", "propertyAssignment", 
                         "propertyName", "arguments", "argument", "expressionSequence", 
                         "singleExpression", "initializer", "assignable", 
                         "objectLiteral", "anonymousFunction", "arrowFunctionParameters", 
                         "arrowFunctionBody", "assignmentOperator", "literal", 
                         "templateStringLiteral", "templateStringAtom", 
                         "numericLiteral", "bigintLiteral", "getter", "setter", 
                         "identifierName", "identifier", "reservedWord", 
                         "keyword", "let_", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PScriptParser.ruleNames;
        this.literalNames = PScriptParser.literalNames;
        this.symbolicNames = PScriptParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.expressionStatement_sempred(localctx, predIndex);
    	case 28:
    	    		return this.continueStatement_sempred(localctx, predIndex);
    	case 29:
    	    		return this.breakStatement_sempred(localctx, predIndex);
    	case 30:
    	    		return this.returnStatement_sempred(localctx, predIndex);
    	case 31:
    	    		return this.yieldStatement_sempred(localctx, predIndex);
    	case 39:
    	    		return this.throwStatement_sempred(localctx, predIndex);
    	case 47:
    	    		return this.classElement_sempred(localctx, predIndex);
    	case 48:
    	    		return this.methodDefinition_sempred(localctx, predIndex);
    	case 65:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 78:
    	    		return this.getter_sempred(localctx, predIndex);
    	case 79:
    	    		return this.setter_sempred(localctx, predIndex);
    	case 85:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expressionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.notOpenBraceAndNotFunction();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    continueStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    breakStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    returnStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    yieldStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    throwStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    classElement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.n("static");
    		case 7:
    			return this.n("static");
    		case 8:
    			return this.n("static");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    methodDefinition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 47);
    		case 11:
    			return this.precpred(this._ctx, 27);
    		case 12:
    			return this.precpred(this._ctx, 26);
    		case 13:
    			return this.precpred(this._ctx, 25);
    		case 14:
    			return this.precpred(this._ctx, 24);
    		case 15:
    			return this.precpred(this._ctx, 23);
    		case 16:
    			return this.precpred(this._ctx, 22);
    		case 17:
    			return this.precpred(this._ctx, 21);
    		case 18:
    			return this.precpred(this._ctx, 20);
    		case 19:
    			return this.precpred(this._ctx, 19);
    		case 20:
    			return this.precpred(this._ctx, 18);
    		case 21:
    			return this.precpred(this._ctx, 17);
    		case 22:
    			return this.precpred(this._ctx, 16);
    		case 23:
    			return this.precpred(this._ctx, 15);
    		case 24:
    			return this.precpred(this._ctx, 14);
    		case 25:
    			return this.precpred(this._ctx, 13);
    		case 26:
    			return this.precpred(this._ctx, 12);
    		case 27:
    			return this.precpred(this._ctx, 11);
    		case 28:
    			return this.precpred(this._ctx, 46);
    		case 29:
    			return this.precpred(this._ctx, 45);
    		case 30:
    			return this.precpred(this._ctx, 41);
    		case 31:
    			return this.precpred(this._ctx, 39);
    		case 32:
    			return this.notLineTerminator();
    		case 33:
    			return this.precpred(this._ctx, 38);
    		case 34:
    			return this.notLineTerminator();
    		case 35:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.n("get");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 37:
    			return this.n("set");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 38:
    			return this.lineTerminatorAhead();
    		case 39:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, PScriptParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 172;
	            this.match(PScriptParser.HashBangLine);

	        }
	        this.state = 176;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 175;
	            this.sourceElements();

	        }
	        this.state = 178;
	        this.match(PScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, PScriptParser.RULE_sourceElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, PScriptParser.RULE_statement);
	    try {
	        this.state = 202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 182;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 183;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 184;
	            this.importStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 185;
	            this.exportStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 186;
	            this.emptyStatement_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 187;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 188;
	            this.functionDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 189;
	            this.expressionStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 190;
	            this.ifStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 191;
	            this.iterationStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 192;
	            this.continueStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 193;
	            this.breakStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 194;
	            this.returnStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 195;
	            this.yieldStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 196;
	            this.withStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 197;
	            this.labelledStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 198;
	            this.switchStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 199;
	            this.throwStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 200;
	            this.tryStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 201;
	            this.debuggerStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, PScriptParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 206;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 205;
	            this.statementList();

	        }
	        this.state = 208;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, PScriptParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 210;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 213; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, PScriptParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 215;
	        this.match(PScriptParser.Import);
	        this.state = 216;
	        this.importFromBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFromBlock() {
	    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, PScriptParser.RULE_importFromBlock);
	    try {
	        this.state = 230;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 26:
	        case 62:
	        case 63:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 219;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 218;
	                this.importDefault();

	            }
	            this.state = 223;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 26:
	            case 62:
	            case 63:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	                this.state = 221;
	                this.importNamespace();
	                break;
	            case 9:
	                this.state = 222;
	                this.importModuleItems();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 225;
	            this.importFrom();
	            this.state = 226;
	            this.eos();
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 228;
	            this.match(PScriptParser.StringLiteral);
	            this.state = 229;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importModuleItems() {
	    let localctx = new ImportModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, PScriptParser.RULE_importModuleItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 232;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 238;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 233;
	                this.importAliasName();
	                this.state = 234;
	                this.match(PScriptParser.Comma); 
	            }
	            this.state = 240;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294965251) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 536870911) !== 0)) {
	            this.state = 241;
	            this.importAliasName();
	            this.state = 243;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 242;
	                this.match(PScriptParser.Comma);
	            }

	        }

	        this.state = 247;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importAliasName() {
	    let localctx = new ImportAliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, PScriptParser.RULE_importAliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this.moduleExportName();
	        this.state = 252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 250;
	            this.match(PScriptParser.As);
	            this.state = 251;
	            this.importedBinding();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleExportName() {
	    let localctx = new ModuleExportNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, PScriptParser.RULE_moduleExportName);
	    try {
	        this.state = 256;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 63:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 254;
	            this.identifierName();
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 255;
	            this.match(PScriptParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importedBinding() {
	    let localctx = new ImportedBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, PScriptParser.RULE_importedBinding);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        _la = this._input.LA(1);
	        if(!(((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 2051) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDefault() {
	    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, PScriptParser.RULE_importDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 260;
	        this.aliasName();
	        this.state = 261;
	        this.match(PScriptParser.Comma);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importNamespace() {
	    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, PScriptParser.RULE_importNamespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 265;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	            this.state = 263;
	            this.match(PScriptParser.Multiply);
	            break;
	        case 62:
	        case 63:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	            this.state = 264;
	            this.identifierName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 267;
	            this.match(PScriptParser.As);
	            this.state = 268;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFrom() {
	    let localctx = new ImportFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, PScriptParser.RULE_importFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this.match(PScriptParser.From);
	        this.state = 272;
	        this.match(PScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasName() {
	    let localctx = new AliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, PScriptParser.RULE_aliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 274;
	        this.identifierName();
	        this.state = 277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 275;
	            this.match(PScriptParser.As);
	            this.state = 276;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, PScriptParser.RULE_exportStatement);
	    try {
	        this.state = 294;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExportDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 279;
	            this.match(PScriptParser.Export);
	            this.state = 281;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 280;
	                this.match(PScriptParser.Default);

	            }
	            this.state = 285;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 283;
	                this.exportFromBlock();
	                break;

	            case 2:
	                this.state = 284;
	                this.declaration();
	                break;

	            }
	            this.state = 287;
	            this.eos();
	            break;

	        case 2:
	            localctx = new ExportDefaultDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 289;
	            this.match(PScriptParser.Export);
	            this.state = 290;
	            this.match(PScriptParser.Default);
	            this.state = 291;
	            this.singleExpression(0);
	            this.state = 292;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportFromBlock() {
	    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, PScriptParser.RULE_exportFromBlock);
	    try {
	        this.state = 306;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 62:
	        case 63:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 296;
	            this.importNamespace();
	            this.state = 297;
	            this.importFrom();
	            this.state = 298;
	            this.eos();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 300;
	            this.exportModuleItems();
	            this.state = 302;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 301;
	                this.importFrom();

	            }
	            this.state = 304;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportModuleItems() {
	    let localctx = new ExportModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, PScriptParser.RULE_exportModuleItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 314;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 309;
	                this.exportAliasName();
	                this.state = 310;
	                this.match(PScriptParser.Comma); 
	            }
	            this.state = 316;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294965251) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 536870911) !== 0)) {
	            this.state = 317;
	            this.exportAliasName();
	            this.state = 319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 318;
	                this.match(PScriptParser.Comma);
	            }

	        }

	        this.state = 323;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportAliasName() {
	    let localctx = new ExportAliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, PScriptParser.RULE_exportAliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        this.moduleExportName();
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 326;
	            this.match(PScriptParser.As);
	            this.state = 327;
	            this.moduleExportName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, PScriptParser.RULE_declaration);
	    try {
	        this.state = 333;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	        case 106:
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 330;
	            this.variableStatement();
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 331;
	            this.classDeclaration();
	            break;
	        case 90:
	        case 109:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 332;
	            this.functionDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, PScriptParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 335;
	        this.variableDeclarationList();
	        this.state = 336;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, PScriptParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.varModifier();
	        this.state = 339;
	        this.variableDeclaration();
	        this.state = 344;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 340;
	                this.match(PScriptParser.Comma);
	                this.state = 341;
	                this.variableDeclaration(); 
	            }
	            this.state = 346;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, PScriptParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 347;
	        this.assignable();
	        this.state = 350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 348;
	            this.match(PScriptParser.Assign);
	            this.state = 349;
	            this.singleExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, PScriptParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        this.match(PScriptParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, PScriptParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        if (!( this.notOpenBraceAndNotFunction())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
	        }
	        this.state = 355;
	        this.expressionSequence();
	        this.state = 356;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, PScriptParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 358;
	        this.match(PScriptParser.If);
	        this.state = 359;
	        this.match(PScriptParser.OpenParen);
	        this.state = 360;
	        this.expressionSequence();
	        this.state = 361;
	        this.match(PScriptParser.CloseParen);
	        this.state = 362;
	        this.statement();
	        this.state = 365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 363;
	            this.match(PScriptParser.Else);
	            this.state = 364;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, PScriptParser.RULE_iterationStatement);
	    var _la = 0;
	    try {
	        this.state = 422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 367;
	            this.match(PScriptParser.Do);
	            this.state = 368;
	            this.statement();
	            this.state = 369;
	            this.match(PScriptParser.While);
	            this.state = 370;
	            this.match(PScriptParser.OpenParen);
	            this.state = 371;
	            this.expressionSequence();
	            this.state = 372;
	            this.match(PScriptParser.CloseParen);
	            this.state = 373;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 375;
	            this.match(PScriptParser.While);
	            this.state = 376;
	            this.match(PScriptParser.OpenParen);
	            this.state = 377;
	            this.expressionSequence();
	            this.state = 378;
	            this.match(PScriptParser.CloseParen);
	            this.state = 379;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 381;
	            this.match(PScriptParser.For);
	            this.state = 382;
	            this.match(PScriptParser.OpenParen);
	            this.state = 385;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 383;
	                this.expressionSequence();

	            } else if(la_===2) {
	                this.state = 384;
	                this.variableDeclarationList();

	            }
	            this.state = 387;
	            this.match(PScriptParser.SemiColon);
	            this.state = 389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060976) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 809650175) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 235205241) !== 0)) {
	                this.state = 388;
	                this.expressionSequence();
	            }

	            this.state = 391;
	            this.match(PScriptParser.SemiColon);
	            this.state = 393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060976) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 809650175) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 235205241) !== 0)) {
	                this.state = 392;
	                this.expressionSequence();
	            }

	            this.state = 395;
	            this.match(PScriptParser.CloseParen);
	            this.state = 396;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 397;
	            this.match(PScriptParser.For);
	            this.state = 398;
	            this.match(PScriptParser.OpenParen);
	            this.state = 401;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 399;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 400;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 403;
	            this.match(PScriptParser.In);
	            this.state = 404;
	            this.expressionSequence();
	            this.state = 405;
	            this.match(PScriptParser.CloseParen);
	            this.state = 406;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForOfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 408;
	            this.match(PScriptParser.For);
	            this.state = 410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110) {
	                this.state = 409;
	                this.match(PScriptParser.Await);
	            }

	            this.state = 412;
	            this.match(PScriptParser.OpenParen);
	            this.state = 415;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 413;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 414;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 417;
	            this.match(PScriptParser.Of);
	            this.state = 418;
	            this.expressionSequence();
	            this.state = 419;
	            this.match(PScriptParser.CloseParen);
	            this.state = 420;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, PScriptParser.RULE_varModifier);
	    try {
	        this.state = 427;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 424;
	            this.match(PScriptParser.Var);
	            break;
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 425;
	            this.let_();
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 426;
	            this.match(PScriptParser.Const);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, PScriptParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(PScriptParser.Continue);
	        this.state = 432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 430;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 431;
	            this.identifier();

	        }
	        this.state = 434;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, PScriptParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(PScriptParser.Break);
	        this.state = 439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 437;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 438;
	            this.identifier();

	        }
	        this.state = 441;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, PScriptParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this.match(PScriptParser.Return);
	        this.state = 446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 444;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 445;
	            this.expressionSequence();

	        }
	        this.state = 448;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, PScriptParser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(PScriptParser.Yield);
	        this.state = 453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 451;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 452;
	            this.expressionSequence();

	        }
	        this.state = 455;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, PScriptParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(PScriptParser.With);
	        this.state = 458;
	        this.match(PScriptParser.OpenParen);
	        this.state = 459;
	        this.expressionSequence();
	        this.state = 460;
	        this.match(PScriptParser.CloseParen);
	        this.state = 461;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, PScriptParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.match(PScriptParser.Switch);
	        this.state = 464;
	        this.match(PScriptParser.OpenParen);
	        this.state = 465;
	        this.expressionSequence();
	        this.state = 466;
	        this.match(PScriptParser.CloseParen);
	        this.state = 467;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, PScriptParser.RULE_caseBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 471;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===77) {
	            this.state = 470;
	            this.caseClauses();
	        }

	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 473;
	            this.defaultClause();
	            this.state = 475;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 474;
	                this.caseClauses();
	            }

	        }

	        this.state = 479;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, PScriptParser.RULE_caseClauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 481;
	            this.caseClause();
	            this.state = 484; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===77);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, PScriptParser.RULE_caseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 486;
	        this.match(PScriptParser.Case);
	        this.state = 487;
	        this.expressionSequence();
	        this.state = 488;
	        this.match(PScriptParser.Colon);
	        this.state = 490;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 489;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, PScriptParser.RULE_defaultClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 492;
	        this.match(PScriptParser.Default);
	        this.state = 493;
	        this.match(PScriptParser.Colon);
	        this.state = 495;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 494;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, PScriptParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.identifier();
	        this.state = 498;
	        this.match(PScriptParser.Colon);
	        this.state = 499;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, PScriptParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.match(PScriptParser.Throw);
	        this.state = 502;
	        if (!( this.notLineTerminator())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	        }
	        this.state = 503;
	        this.expressionSequence();
	        this.state = 504;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, PScriptParser.RULE_tryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.match(PScriptParser.Try);
	        this.state = 507;
	        this.block();
	        this.state = 513;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.state = 508;
	            this.catchProduction();
	            this.state = 510;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 509;
	                this.finallyProduction();

	            }
	            break;
	        case 82:
	            this.state = 512;
	            this.finallyProduction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, PScriptParser.RULE_catchProduction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this.match(PScriptParser.Catch);
	        this.state = 521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 516;
	            this.match(PScriptParser.OpenParen);
	            this.state = 518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===9 || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 517;
	                this.assignable();
	            }

	            this.state = 520;
	            this.match(PScriptParser.CloseParen);
	        }

	        this.state = 523;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, PScriptParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this.match(PScriptParser.Finally);
	        this.state = 526;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, PScriptParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(PScriptParser.Debugger);
	        this.state = 529;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, PScriptParser.RULE_functionDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 531;
	            this.match(PScriptParser.Async);
	        }

	        this.state = 534;
	        this.match(PScriptParser.Function_);
	        this.state = 536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 535;
	            this.match(PScriptParser.Multiply);
	        }

	        this.state = 538;
	        this.identifier();
	        this.state = 539;
	        this.match(PScriptParser.OpenParen);
	        this.state = 541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	            this.state = 540;
	            this.formalParameterList();
	        }

	        this.state = 543;
	        this.match(PScriptParser.CloseParen);
	        this.state = 544;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, PScriptParser.RULE_classDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.match(PScriptParser.Class);
	        this.state = 547;
	        this.identifier();
	        this.state = 548;
	        this.classTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTail() {
	    let localctx = new ClassTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, PScriptParser.RULE_classTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===104) {
	            this.state = 550;
	            this.match(PScriptParser.Extends);
	            this.state = 551;
	            this.singleExpression(0);
	        }

	        this.state = 554;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 558;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 555;
	                this.classElement(); 
	            }
	            this.state = 560;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 561;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classElement() {
	    let localctx = new ClassElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, PScriptParser.RULE_classElement);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 566;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	            if(la_===1) {
	                this.state = 563;
	                this.match(PScriptParser.Static);

	            } else if(la_===2) {
	                this.state = 564;
	                if (!( this.n("static"))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                }
	                this.state = 565;
	                this.identifier();

	            }
	            this.state = 568;
	            this.methodDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 572;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	            if(la_===1) {
	                this.state = 569;
	                this.match(PScriptParser.Static);

	            } else if(la_===2) {
	                this.state = 570;
	                if (!( this.n("static"))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                }
	                this.state = 571;
	                this.identifier();

	            }
	            this.state = 574;
	            this.fieldDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 578;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 575;
	                this.match(PScriptParser.Static);
	                break;

	            case 2:
	                this.state = 576;
	                if (!( this.n("static"))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                }
	                this.state = 577;
	                this.identifier();
	                break;

	            }
	            this.state = 580;
	            this.block();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 581;
	            this.emptyStatement_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinition() {
	    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, PScriptParser.RULE_methodDefinition);
	    var _la = 0;
	    try {
	        this.state = 618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 586;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	            if(la_===1) {
	                this.state = 584;
	                this.match(PScriptParser.Async);
	                this.state = 585;
	                if (!( this.notLineTerminator())) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                }

	            }
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 588;
	                this.match(PScriptParser.Multiply);
	            }

	            this.state = 591;
	            this.classElementName();
	            this.state = 592;
	            this.match(PScriptParser.OpenParen);
	            this.state = 594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 593;
	                this.formalParameterList();
	            }

	            this.state = 596;
	            this.match(PScriptParser.CloseParen);
	            this.state = 597;
	            this.functionBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 600;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            if(la_===1) {
	                this.state = 599;
	                this.match(PScriptParser.Multiply);

	            }
	            this.state = 602;
	            this.getter();
	            this.state = 603;
	            this.match(PScriptParser.OpenParen);
	            this.state = 604;
	            this.match(PScriptParser.CloseParen);
	            this.state = 605;
	            this.functionBody();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 608;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            if(la_===1) {
	                this.state = 607;
	                this.match(PScriptParser.Multiply);

	            }
	            this.state = 610;
	            this.setter();
	            this.state = 611;
	            this.match(PScriptParser.OpenParen);
	            this.state = 613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 612;
	                this.formalParameterList();
	            }

	            this.state = 615;
	            this.match(PScriptParser.CloseParen);
	            this.state = 616;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDefinition() {
	    let localctx = new FieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, PScriptParser.RULE_fieldDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.classElementName();
	        this.state = 622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 621;
	            this.initializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classElementName() {
	    let localctx = new ClassElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, PScriptParser.RULE_classElementName);
	    try {
	        this.state = 626;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.propertyName();
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.privateIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privateIdentifier() {
	    let localctx = new PrivateIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, PScriptParser.RULE_privateIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(PScriptParser.Hashtag);
	        this.state = 629;
	        this.identifierName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, PScriptParser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.state = 644;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 9:
	        case 99:
	        case 100:
	        case 101:
	        case 109:
	        case 111:
	        case 114:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 631;
	            this.formalParameterArg();
	            this.state = 636;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 632;
	                    this.match(PScriptParser.Comma);
	                    this.state = 633;
	                    this.formalParameterArg(); 
	                }
	                this.state = 638;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
	            }

	            this.state = 641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 639;
	                this.match(PScriptParser.Comma);
	                this.state = 640;
	                this.lastFormalParameterArg();
	            }

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 643;
	            this.lastFormalParameterArg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, PScriptParser.RULE_formalParameterArg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.assignable();
	        this.state = 649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 647;
	            this.match(PScriptParser.Assign);
	            this.state = 648;
	            this.singleExpression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameterArg() {
	    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, PScriptParser.RULE_lastFormalParameterArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.match(PScriptParser.Ellipsis);
	        this.state = 652;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, PScriptParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 655;
	            this.sourceElements();

	        }
	        this.state = 658;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElements() {
	    let localctx = new SourceElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, PScriptParser.RULE_sourceElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 660;
	        		this.sourceElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 663; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,74, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, PScriptParser.RULE_arrayLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.match(PScriptParser.OpenBracket);
	        this.state = 666;
	        this.elementList();
	        this.state = 667;
	        this.match(PScriptParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, PScriptParser.RULE_elementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 669;
	                this.match(PScriptParser.Comma); 
	            }
	            this.state = 674;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	        this.state = 676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66323120) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 809650175) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 235205241) !== 0)) {
	            this.state = 675;
	            this.arrayElement();
	        }

	        this.state = 686;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 679; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 678;
	                    this.match(PScriptParser.Comma);
	                    this.state = 681; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===13);
	                this.state = 683;
	                this.arrayElement(); 
	            }
	            this.state = 688;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===13) {
	            this.state = 689;
	            this.match(PScriptParser.Comma);
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElement() {
	    let localctx = new ArrayElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, PScriptParser.RULE_arrayElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 695;
	            this.match(PScriptParser.Ellipsis);
	        }

	        this.state = 698;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, PScriptParser.RULE_propertyAssignment);
	    var _la = 0;
	    try {
	        this.state = 739;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 700;
	            this.propertyName();
	            this.state = 701;
	            this.match(PScriptParser.Colon);
	            this.state = 702;
	            this.singleExpression(0);
	            break;

	        case 2:
	            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 704;
	            this.match(PScriptParser.OpenBracket);
	            this.state = 705;
	            this.singleExpression(0);
	            this.state = 706;
	            this.match(PScriptParser.CloseBracket);
	            this.state = 707;
	            this.match(PScriptParser.Colon);
	            this.state = 708;
	            this.singleExpression(0);
	            break;

	        case 3:
	            localctx = new FunctionPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 711;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	            if(la_===1) {
	                this.state = 710;
	                this.match(PScriptParser.Async);

	            }
	            this.state = 714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 713;
	                this.match(PScriptParser.Multiply);
	            }

	            this.state = 716;
	            this.propertyName();
	            this.state = 717;
	            this.match(PScriptParser.OpenParen);
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 718;
	                this.formalParameterList();
	            }

	            this.state = 721;
	            this.match(PScriptParser.CloseParen);
	            this.state = 722;
	            this.functionBody();
	            break;

	        case 4:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 724;
	            this.getter();
	            this.state = 725;
	            this.match(PScriptParser.OpenParen);
	            this.state = 726;
	            this.match(PScriptParser.CloseParen);
	            this.state = 727;
	            this.functionBody();
	            break;

	        case 5:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 729;
	            this.setter();
	            this.state = 730;
	            this.match(PScriptParser.OpenParen);
	            this.state = 731;
	            this.formalParameterArg();
	            this.state = 732;
	            this.match(PScriptParser.CloseParen);
	            this.state = 733;
	            this.functionBody();
	            break;

	        case 6:
	            localctx = new PropertyShorthandContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 735;
	                this.match(PScriptParser.Ellipsis);
	            }

	            this.state = 738;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, PScriptParser.RULE_propertyName);
	    try {
	        this.state = 748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 63:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 741;
	            this.identifierName();
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 742;
	            this.match(PScriptParser.StringLiteral);
	            break;
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 743;
	            this.numericLiteral();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 744;
	            this.match(PScriptParser.OpenBracket);
	            this.state = 745;
	            this.singleExpression(0);
	            this.state = 746;
	            this.match(PScriptParser.CloseBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, PScriptParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750;
	        this.match(PScriptParser.OpenParen);
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66323120) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 809650175) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 235205241) !== 0)) {
	            this.state = 751;
	            this.argument();
	            this.state = 756;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 752;
	                    this.match(PScriptParser.Comma);
	                    this.state = 753;
	                    this.argument(); 
	                }
	                this.state = 758;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	            }

	            this.state = 760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 759;
	                this.match(PScriptParser.Comma);
	            }

	        }

	        this.state = 764;
	        this.match(PScriptParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, PScriptParser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 766;
	            this.match(PScriptParser.Ellipsis);
	        }

	        this.state = 771;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 769;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.state = 770;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, PScriptParser.RULE_expressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.singleExpression(0);
	        this.state = 778;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 774;
	                this.match(PScriptParser.Comma);
	                this.state = 775;
	                this.singleExpression(0); 
	            }
	            this.state = 780;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 130;
	    this.enterRecursionRule(localctx, 130, PScriptParser.RULE_singleExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 782;
	            this.anonymousFunction();
	            break;

	        case 2:
	            localctx = new ClassExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 783;
	            this.match(PScriptParser.Class);
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 784;
	                this.identifier();
	            }

	            this.state = 787;
	            this.classTail();
	            break;

	        case 3:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 788;
	            this.match(PScriptParser.New);
	            this.state = 789;
	            this.identifier();
	            this.state = 790;
	            this.arguments();
	            break;

	        case 4:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 792;
	            this.match(PScriptParser.New);
	            this.state = 793;
	            this.singleExpression(0);
	            this.state = 794;
	            this.arguments();
	            break;

	        case 5:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 796;
	            this.match(PScriptParser.New);
	            this.state = 797;
	            this.singleExpression(42);
	            break;

	        case 6:
	            localctx = new MetaExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 798;
	            this.match(PScriptParser.New);
	            this.state = 799;
	            this.match(PScriptParser.Dot);
	            this.state = 800;
	            this.identifier();
	            break;

	        case 7:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 801;
	            this.match(PScriptParser.Delete);
	            this.state = 802;
	            this.singleExpression(37);
	            break;

	        case 8:
	            localctx = new VoidExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 803;
	            this.match(PScriptParser.Void);
	            this.state = 804;
	            this.singleExpression(36);
	            break;

	        case 9:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 805;
	            this.match(PScriptParser.Typeof);
	            this.state = 806;
	            this.singleExpression(35);
	            break;

	        case 10:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 807;
	            this.match(PScriptParser.PlusPlus);
	            this.state = 808;
	            this.singleExpression(34);
	            break;

	        case 11:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 809;
	            this.match(PScriptParser.MinusMinus);
	            this.state = 810;
	            this.singleExpression(33);
	            break;

	        case 12:
	            localctx = new UnaryPlusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 811;
	            this.match(PScriptParser.Plus);
	            this.state = 812;
	            this.singleExpression(32);
	            break;

	        case 13:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 813;
	            this.match(PScriptParser.Minus);
	            this.state = 814;
	            this.singleExpression(31);
	            break;

	        case 14:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 815;
	            this.match(PScriptParser.BitNot);
	            this.state = 816;
	            this.singleExpression(30);
	            break;

	        case 15:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 817;
	            this.match(PScriptParser.Not);
	            this.state = 818;
	            this.singleExpression(29);
	            break;

	        case 16:
	            localctx = new AwaitExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 819;
	            this.match(PScriptParser.Await);
	            this.state = 820;
	            this.singleExpression(28);
	            break;

	        case 17:
	            localctx = new ImportExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 821;
	            this.match(PScriptParser.Import);
	            this.state = 822;
	            this.match(PScriptParser.OpenParen);
	            this.state = 823;
	            this.singleExpression(0);
	            this.state = 824;
	            this.match(PScriptParser.CloseParen);
	            break;

	        case 18:
	            localctx = new YieldExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 826;
	            this.yieldStatement();
	            break;

	        case 19:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 827;
	            this.match(PScriptParser.This);
	            break;

	        case 20:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 828;
	            this.identifier();
	            break;

	        case 21:
	            localctx = new SuperExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 829;
	            this.match(PScriptParser.Super);
	            break;

	        case 22:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 830;
	            this.literal();
	            break;

	        case 23:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 831;
	            this.arrayLiteral();
	            break;

	        case 24:
	            localctx = new ObjectLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 832;
	            this.objectLiteral();
	            break;

	        case 25:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 833;
	            this.match(PScriptParser.OpenParen);
	            this.state = 834;
	            this.expressionSequence();
	            this.state = 835;
	            this.match(PScriptParser.CloseParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 926;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 924;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new OptionalChainExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 839;
	                    if (!( this.precpred(this._ctx, 47))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 47)");
	                    }
	                    this.state = 840;
	                    this.match(PScriptParser.QuestionMarkDot);
	                    this.state = 841;
	                    this.singleExpression(48);
	                    break;

	                case 2:
	                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 842;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 843;
	                    this.match(PScriptParser.Power);
	                    this.state = 844;
	                    this.singleExpression(27);
	                    break;

	                case 3:
	                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 845;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 846;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 469762048) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 847;
	                    this.singleExpression(27);
	                    break;

	                case 4:
	                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 848;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 849;
	                    _la = this._input.LA(1);
	                    if(!(_la===22 || _la===23)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 850;
	                    this.singleExpression(26);
	                    break;

	                case 5:
	                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 851;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 852;
	                    this.match(PScriptParser.NullCoalesce);
	                    this.state = 853;
	                    this.singleExpression(25);
	                    break;

	                case 6:
	                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 854;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 855;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 7) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 856;
	                    this.singleExpression(24);
	                    break;

	                case 7:
	                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 857;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 858;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 859;
	                    this.singleExpression(23);
	                    break;

	                case 8:
	                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 860;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 861;
	                    this.match(PScriptParser.Instanceof);
	                    this.state = 862;
	                    this.singleExpression(22);
	                    break;

	                case 9:
	                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 863;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 864;
	                    this.match(PScriptParser.In);
	                    this.state = 865;
	                    this.singleExpression(21);
	                    break;

	                case 10:
	                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 866;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 867;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 868;
	                    this.singleExpression(20);
	                    break;

	                case 11:
	                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 869;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 870;
	                    this.match(PScriptParser.BitAnd);
	                    this.state = 871;
	                    this.singleExpression(19);
	                    break;

	                case 12:
	                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 872;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 873;
	                    this.match(PScriptParser.BitXOr);
	                    this.state = 874;
	                    this.singleExpression(18);
	                    break;

	                case 13:
	                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 875;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 876;
	                    this.match(PScriptParser.BitOr);
	                    this.state = 877;
	                    this.singleExpression(17);
	                    break;

	                case 14:
	                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 878;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 879;
	                    this.match(PScriptParser.And);
	                    this.state = 880;
	                    this.singleExpression(16);
	                    break;

	                case 15:
	                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 881;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 882;
	                    this.match(PScriptParser.Or);
	                    this.state = 883;
	                    this.singleExpression(15);
	                    break;

	                case 16:
	                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 884;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 885;
	                    this.match(PScriptParser.QuestionMark);
	                    this.state = 886;
	                    this.singleExpression(0);
	                    this.state = 887;
	                    this.match(PScriptParser.Colon);
	                    this.state = 888;
	                    this.singleExpression(14);
	                    break;

	                case 17:
	                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 890;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 891;
	                    this.match(PScriptParser.Assign);
	                    this.state = 892;
	                    this.singleExpression(12);
	                    break;

	                case 18:
	                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 893;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 894;
	                    this.assignmentOperator();
	                    this.state = 895;
	                    this.singleExpression(11);
	                    break;

	                case 19:
	                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 897;
	                    if (!( this.precpred(this._ctx, 46))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 46)");
	                    }
	                    this.state = 899;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 898;
	                        this.match(PScriptParser.QuestionMarkDot);
	                    }

	                    this.state = 901;
	                    this.match(PScriptParser.OpenBracket);
	                    this.state = 902;
	                    this.expressionSequence();
	                    this.state = 903;
	                    this.match(PScriptParser.CloseBracket);
	                    break;

	                case 20:
	                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 905;
	                    if (!( this.precpred(this._ctx, 45))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
	                    }
	                    this.state = 907;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===15) {
	                        this.state = 906;
	                        this.match(PScriptParser.QuestionMark);
	                    }

	                    this.state = 909;
	                    this.match(PScriptParser.Dot);
	                    this.state = 911;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===31) {
	                        this.state = 910;
	                        this.match(PScriptParser.Hashtag);
	                    }

	                    this.state = 913;
	                    this.identifierName();
	                    break;

	                case 21:
	                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 914;
	                    if (!( this.precpred(this._ctx, 41))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
	                    }
	                    this.state = 915;
	                    this.arguments();
	                    break;

	                case 22:
	                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 916;
	                    if (!( this.precpred(this._ctx, 39))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
	                    }
	                    this.state = 917;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 918;
	                    this.match(PScriptParser.PlusPlus);
	                    break;

	                case 23:
	                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 919;
	                    if (!( this.precpred(this._ctx, 38))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
	                    }
	                    this.state = 920;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 921;
	                    this.match(PScriptParser.MinusMinus);
	                    break;

	                case 24:
	                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, PScriptParser.RULE_singleExpression);
	                    this.state = 922;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 923;
	                    this.templateStringLiteral();
	                    break;

	                } 
	            }
	            this.state = 928;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, PScriptParser.RULE_initializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.match(PScriptParser.Assign);
	        this.state = 930;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignable() {
	    let localctx = new AssignableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, PScriptParser.RULE_assignable);
	    try {
	        this.state = 935;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 99:
	        case 100:
	        case 101:
	        case 109:
	        case 111:
	        case 114:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 932;
	            this.identifier();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 933;
	            this.arrayLiteral();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 934;
	            this.objectLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, PScriptParser.RULE_objectLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 937;
	        this.match(PScriptParser.OpenBrace);
	        this.state = 949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 938;
	            this.propertyAssignment();
	            this.state = 943;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 939;
	                    this.match(PScriptParser.Comma);
	                    this.state = 940;
	                    this.propertyAssignment(); 
	                }
	                this.state = 945;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
	            }

	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 946;
	                this.match(PScriptParser.Comma);
	            }


	        }
	        this.state = 951;
	        this.match(PScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousFunction() {
	    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, PScriptParser.RULE_anonymousFunction);
	    var _la = 0;
	    try {
	        this.state = 973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AnonymousFunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 953;
	                this.match(PScriptParser.Async);
	            }

	            this.state = 956;
	            this.match(PScriptParser.Function_);
	            this.state = 958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 957;
	                this.match(PScriptParser.Multiply);
	            }

	            this.state = 960;
	            this.match(PScriptParser.OpenParen);
	            this.state = 962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 961;
	                this.formalParameterList();
	            }

	            this.state = 964;
	            this.match(PScriptParser.CloseParen);
	            this.state = 965;
	            this.functionBody();
	            break;

	        case 2:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 967;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	            if(la_===1) {
	                this.state = 966;
	                this.match(PScriptParser.Async);

	            }
	            this.state = 969;
	            this.arrowFunctionParameters();
	            this.state = 970;
	            this.match(PScriptParser.ARROW);
	            this.state = 971;
	            this.arrowFunctionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, PScriptParser.RULE_arrowFunctionParameters);
	    var _la = 0;
	    try {
	        this.state = 981;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 99:
	        case 100:
	        case 101:
	        case 109:
	        case 111:
	        case 114:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 975;
	            this.identifier();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 976;
	            this.match(PScriptParser.OpenParen);
	            this.state = 978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262688) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0)) {
	                this.state = 977;
	                this.formalParameterList();
	            }

	            this.state = 980;
	            this.match(PScriptParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, PScriptParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 985;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 983;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 984;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, PScriptParser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        _la = this._input.LA(1);
	        if(!(((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 8191) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, PScriptParser.RULE_literal);
	    try {
	        this.state = 996;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 989;
	            this.match(PScriptParser.NullLiteral);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 990;
	            this.match(PScriptParser.BooleanLiteral);
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 991;
	            this.match(PScriptParser.StringLiteral);
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 992;
	            this.templateStringLiteral();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 993;
	            this.match(PScriptParser.RegularExpressionLiteral);
	            break;
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 994;
	            this.numericLiteral();
	            break;
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 995;
	            this.bigintLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringLiteral() {
	    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, PScriptParser.RULE_templateStringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 998;
	        this.match(PScriptParser.BackTick);
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===129 || _la===130) {
	            this.state = 999;
	            this.templateStringAtom();
	            this.state = 1004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1005;
	        this.match(PScriptParser.BackTick);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringAtom() {
	    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, PScriptParser.RULE_templateStringAtom);
	    try {
	        this.state = 1012;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 130:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1007;
	            this.match(PScriptParser.TemplateStringAtom);
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1008;
	            this.match(PScriptParser.TemplateStringStartExpression);
	            this.state = 1009;
	            this.singleExpression(0);
	            this.state = 1010;
	            this.match(PScriptParser.TemplateCloseBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, PScriptParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        _la = this._input.LA(1);
	        if(!(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bigintLiteral() {
	    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, PScriptParser.RULE_bigintLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        _la = this._input.LA(1);
	        if(!(((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, PScriptParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1018;
	        if (!( this.n("get"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"get\")");
	        }
	        this.state = 1019;
	        this.identifier();
	        this.state = 1020;
	        this.classElementName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, PScriptParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1022;
	        if (!( this.n("set"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"set\")");
	        }
	        this.state = 1023;
	        this.identifier();
	        this.state = 1024;
	        this.classElementName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, PScriptParser.RULE_identifierName);
	    try {
	        this.state = 1028;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1026;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1027;
	            this.reservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, PScriptParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1030;
	        _la = this._input.LA(1);
	        if(!(((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 4232199) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, PScriptParser.RULE_reservedWord);
	    try {
	        this.state = 1035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1032;
	            this.keyword();
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1033;
	            this.match(PScriptParser.NullLiteral);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1034;
	            this.match(PScriptParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, PScriptParser.RULE_keyword);
	    try {
	        this.state = 1084;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1037;
	            this.match(PScriptParser.Break);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this.match(PScriptParser.Do);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1039;
	            this.match(PScriptParser.Instanceof);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1040;
	            this.match(PScriptParser.Typeof);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1041;
	            this.match(PScriptParser.Case);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1042;
	            this.match(PScriptParser.Else);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1043;
	            this.match(PScriptParser.New);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1044;
	            this.match(PScriptParser.Var);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1045;
	            this.match(PScriptParser.Catch);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1046;
	            this.match(PScriptParser.Finally);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1047;
	            this.match(PScriptParser.Return);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1048;
	            this.match(PScriptParser.Void);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1049;
	            this.match(PScriptParser.Continue);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1050;
	            this.match(PScriptParser.For);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1051;
	            this.match(PScriptParser.Switch);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1052;
	            this.match(PScriptParser.While);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1053;
	            this.match(PScriptParser.Debugger);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1054;
	            this.match(PScriptParser.Function_);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1055;
	            this.match(PScriptParser.This);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1056;
	            this.match(PScriptParser.With);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1057;
	            this.match(PScriptParser.Default);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1058;
	            this.match(PScriptParser.If);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1059;
	            this.match(PScriptParser.Throw);
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1060;
	            this.match(PScriptParser.Delete);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1061;
	            this.match(PScriptParser.In);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1062;
	            this.match(PScriptParser.Try);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1063;
	            this.match(PScriptParser.Class);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1064;
	            this.match(PScriptParser.Enum);
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1065;
	            this.match(PScriptParser.Extends);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1066;
	            this.match(PScriptParser.Super);
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1067;
	            this.match(PScriptParser.Const);
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1068;
	            this.match(PScriptParser.Export);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1069;
	            this.match(PScriptParser.Import);
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1070;
	            this.match(PScriptParser.Implements);
	            break;
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1071;
	            this.let_();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1072;
	            this.match(PScriptParser.Private);
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1073;
	            this.match(PScriptParser.Public);
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1074;
	            this.match(PScriptParser.Interface);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1075;
	            this.match(PScriptParser.Package);
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1076;
	            this.match(PScriptParser.Protected);
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1077;
	            this.match(PScriptParser.Static);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1078;
	            this.match(PScriptParser.Yield);
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1079;
	            this.match(PScriptParser.Async);
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1080;
	            this.match(PScriptParser.Await);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1081;
	            this.match(PScriptParser.From);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1082;
	            this.match(PScriptParser.As);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1083;
	            this.match(PScriptParser.Of);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, PScriptParser.RULE_let_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        _la = this._input.LA(1);
	        if(!(_la===113 || _la===114)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, PScriptParser.RULE_eos);
	    try {
	        this.state = 1092;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1088;
	            this.match(PScriptParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1089;
	            this.match(PScriptParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1090;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1091;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

PScriptParser.EOF = antlr4.Token.EOF;
PScriptParser.HashBangLine = 1;
PScriptParser.MultiLineComment = 2;
PScriptParser.SingleLineComment = 3;
PScriptParser.RegularExpressionLiteral = 4;
PScriptParser.OpenBracket = 5;
PScriptParser.CloseBracket = 6;
PScriptParser.OpenParen = 7;
PScriptParser.CloseParen = 8;
PScriptParser.OpenBrace = 9;
PScriptParser.TemplateCloseBrace = 10;
PScriptParser.CloseBrace = 11;
PScriptParser.SemiColon = 12;
PScriptParser.Comma = 13;
PScriptParser.Assign = 14;
PScriptParser.QuestionMark = 15;
PScriptParser.QuestionMarkDot = 16;
PScriptParser.Colon = 17;
PScriptParser.Ellipsis = 18;
PScriptParser.Dot = 19;
PScriptParser.PlusPlus = 20;
PScriptParser.MinusMinus = 21;
PScriptParser.Plus = 22;
PScriptParser.Minus = 23;
PScriptParser.BitNot = 24;
PScriptParser.Not = 25;
PScriptParser.Multiply = 26;
PScriptParser.Divide = 27;
PScriptParser.Modulus = 28;
PScriptParser.Power = 29;
PScriptParser.NullCoalesce = 30;
PScriptParser.Hashtag = 31;
PScriptParser.RightShiftArithmetic = 32;
PScriptParser.LeftShiftArithmetic = 33;
PScriptParser.RightShiftLogical = 34;
PScriptParser.LessThan = 35;
PScriptParser.MoreThan = 36;
PScriptParser.LessThanEquals = 37;
PScriptParser.GreaterThanEquals = 38;
PScriptParser.Equals_ = 39;
PScriptParser.NotEquals = 40;
PScriptParser.IdentityEquals = 41;
PScriptParser.IdentityNotEquals = 42;
PScriptParser.BitAnd = 43;
PScriptParser.BitXOr = 44;
PScriptParser.BitOr = 45;
PScriptParser.And = 46;
PScriptParser.Or = 47;
PScriptParser.MultiplyAssign = 48;
PScriptParser.DivideAssign = 49;
PScriptParser.ModulusAssign = 50;
PScriptParser.PlusAssign = 51;
PScriptParser.MinusAssign = 52;
PScriptParser.LeftShiftArithmeticAssign = 53;
PScriptParser.RightShiftArithmeticAssign = 54;
PScriptParser.RightShiftLogicalAssign = 55;
PScriptParser.BitAndAssign = 56;
PScriptParser.BitXorAssign = 57;
PScriptParser.BitOrAssign = 58;
PScriptParser.PowerAssign = 59;
PScriptParser.NullishCoalescingAssign = 60;
PScriptParser.ARROW = 61;
PScriptParser.NullLiteral = 62;
PScriptParser.BooleanLiteral = 63;
PScriptParser.DecimalLiteral = 64;
PScriptParser.HexIntegerLiteral = 65;
PScriptParser.OctalIntegerLiteral = 66;
PScriptParser.OctalIntegerLiteral2 = 67;
PScriptParser.BinaryIntegerLiteral = 68;
PScriptParser.BigHexIntegerLiteral = 69;
PScriptParser.BigOctalIntegerLiteral = 70;
PScriptParser.BigBinaryIntegerLiteral = 71;
PScriptParser.BigDecimalIntegerLiteral = 72;
PScriptParser.Break = 73;
PScriptParser.Do = 74;
PScriptParser.Instanceof = 75;
PScriptParser.Typeof = 76;
PScriptParser.Case = 77;
PScriptParser.Else = 78;
PScriptParser.New = 79;
PScriptParser.Var = 80;
PScriptParser.Catch = 81;
PScriptParser.Finally = 82;
PScriptParser.Return = 83;
PScriptParser.Void = 84;
PScriptParser.Continue = 85;
PScriptParser.For = 86;
PScriptParser.Switch = 87;
PScriptParser.While = 88;
PScriptParser.Debugger = 89;
PScriptParser.Function_ = 90;
PScriptParser.This = 91;
PScriptParser.With = 92;
PScriptParser.Default = 93;
PScriptParser.If = 94;
PScriptParser.Throw = 95;
PScriptParser.Delete = 96;
PScriptParser.In = 97;
PScriptParser.Try = 98;
PScriptParser.As = 99;
PScriptParser.From = 100;
PScriptParser.Of = 101;
PScriptParser.Class = 102;
PScriptParser.Enum = 103;
PScriptParser.Extends = 104;
PScriptParser.Super = 105;
PScriptParser.Const = 106;
PScriptParser.Export = 107;
PScriptParser.Import = 108;
PScriptParser.Async = 109;
PScriptParser.Await = 110;
PScriptParser.Yield = 111;
PScriptParser.Implements = 112;
PScriptParser.StrictLet = 113;
PScriptParser.NonStrictLet = 114;
PScriptParser.Private = 115;
PScriptParser.Public = 116;
PScriptParser.Interface = 117;
PScriptParser.Package = 118;
PScriptParser.Protected = 119;
PScriptParser.Static = 120;
PScriptParser.Identifier = 121;
PScriptParser.StringLiteral = 122;
PScriptParser.BackTick = 123;
PScriptParser.WhiteSpaces = 124;
PScriptParser.LineTerminator = 125;
PScriptParser.HtmlComment = 126;
PScriptParser.CDataComment = 127;
PScriptParser.UnexpectedCharacter = 128;
PScriptParser.TemplateStringStartExpression = 129;
PScriptParser.TemplateStringAtom = 130;

PScriptParser.RULE_program = 0;
PScriptParser.RULE_sourceElement = 1;
PScriptParser.RULE_statement = 2;
PScriptParser.RULE_block = 3;
PScriptParser.RULE_statementList = 4;
PScriptParser.RULE_importStatement = 5;
PScriptParser.RULE_importFromBlock = 6;
PScriptParser.RULE_importModuleItems = 7;
PScriptParser.RULE_importAliasName = 8;
PScriptParser.RULE_moduleExportName = 9;
PScriptParser.RULE_importedBinding = 10;
PScriptParser.RULE_importDefault = 11;
PScriptParser.RULE_importNamespace = 12;
PScriptParser.RULE_importFrom = 13;
PScriptParser.RULE_aliasName = 14;
PScriptParser.RULE_exportStatement = 15;
PScriptParser.RULE_exportFromBlock = 16;
PScriptParser.RULE_exportModuleItems = 17;
PScriptParser.RULE_exportAliasName = 18;
PScriptParser.RULE_declaration = 19;
PScriptParser.RULE_variableStatement = 20;
PScriptParser.RULE_variableDeclarationList = 21;
PScriptParser.RULE_variableDeclaration = 22;
PScriptParser.RULE_emptyStatement_ = 23;
PScriptParser.RULE_expressionStatement = 24;
PScriptParser.RULE_ifStatement = 25;
PScriptParser.RULE_iterationStatement = 26;
PScriptParser.RULE_varModifier = 27;
PScriptParser.RULE_continueStatement = 28;
PScriptParser.RULE_breakStatement = 29;
PScriptParser.RULE_returnStatement = 30;
PScriptParser.RULE_yieldStatement = 31;
PScriptParser.RULE_withStatement = 32;
PScriptParser.RULE_switchStatement = 33;
PScriptParser.RULE_caseBlock = 34;
PScriptParser.RULE_caseClauses = 35;
PScriptParser.RULE_caseClause = 36;
PScriptParser.RULE_defaultClause = 37;
PScriptParser.RULE_labelledStatement = 38;
PScriptParser.RULE_throwStatement = 39;
PScriptParser.RULE_tryStatement = 40;
PScriptParser.RULE_catchProduction = 41;
PScriptParser.RULE_finallyProduction = 42;
PScriptParser.RULE_debuggerStatement = 43;
PScriptParser.RULE_functionDeclaration = 44;
PScriptParser.RULE_classDeclaration = 45;
PScriptParser.RULE_classTail = 46;
PScriptParser.RULE_classElement = 47;
PScriptParser.RULE_methodDefinition = 48;
PScriptParser.RULE_fieldDefinition = 49;
PScriptParser.RULE_classElementName = 50;
PScriptParser.RULE_privateIdentifier = 51;
PScriptParser.RULE_formalParameterList = 52;
PScriptParser.RULE_formalParameterArg = 53;
PScriptParser.RULE_lastFormalParameterArg = 54;
PScriptParser.RULE_functionBody = 55;
PScriptParser.RULE_sourceElements = 56;
PScriptParser.RULE_arrayLiteral = 57;
PScriptParser.RULE_elementList = 58;
PScriptParser.RULE_arrayElement = 59;
PScriptParser.RULE_propertyAssignment = 60;
PScriptParser.RULE_propertyName = 61;
PScriptParser.RULE_arguments = 62;
PScriptParser.RULE_argument = 63;
PScriptParser.RULE_expressionSequence = 64;
PScriptParser.RULE_singleExpression = 65;
PScriptParser.RULE_initializer = 66;
PScriptParser.RULE_assignable = 67;
PScriptParser.RULE_objectLiteral = 68;
PScriptParser.RULE_anonymousFunction = 69;
PScriptParser.RULE_arrowFunctionParameters = 70;
PScriptParser.RULE_arrowFunctionBody = 71;
PScriptParser.RULE_assignmentOperator = 72;
PScriptParser.RULE_literal = 73;
PScriptParser.RULE_templateStringLiteral = 74;
PScriptParser.RULE_templateStringAtom = 75;
PScriptParser.RULE_numericLiteral = 76;
PScriptParser.RULE_bigintLiteral = 77;
PScriptParser.RULE_getter = 78;
PScriptParser.RULE_setter = 79;
PScriptParser.RULE_identifierName = 80;
PScriptParser.RULE_identifier = 81;
PScriptParser.RULE_reservedWord = 82;
PScriptParser.RULE_keyword = 83;
PScriptParser.RULE_let_ = 84;
PScriptParser.RULE_eos = 85;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_program;
    }

	EOF() {
	    return this.getToken(PScriptParser.EOF, 0);
	};

	HashBangLine() {
	    return this.getToken(PScriptParser.HashBangLine, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_sourceElement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitSourceElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	labelledStatement() {
	    return this.getTypedRuleContext(LabelledStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	debuggerStatement() {
	    return this.getTypedRuleContext(DebuggerStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importStatement;
    }

	Import() {
	    return this.getToken(PScriptParser.Import, 0);
	};

	importFromBlock() {
	    return this.getTypedRuleContext(ImportFromBlockContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importFromBlock;
    }

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importModuleItems() {
	    return this.getTypedRuleContext(ImportModuleItemsContext,0);
	};

	importDefault() {
	    return this.getTypedRuleContext(ImportDefaultContext,0);
	};

	StringLiteral() {
	    return this.getToken(PScriptParser.StringLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importModuleItems;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	importAliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportAliasNameContext);
	    } else {
	        return this.getTypedRuleContext(ImportAliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportModuleItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportAliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importAliasName;
    }

	moduleExportName() {
	    return this.getTypedRuleContext(ModuleExportNameContext,0);
	};

	As() {
	    return this.getToken(PScriptParser.As, 0);
	};

	importedBinding() {
	    return this.getTypedRuleContext(ImportedBindingContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleExportNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_moduleExportName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(PScriptParser.StringLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitModuleExportName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportedBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importedBinding;
    }

	Identifier() {
	    return this.getToken(PScriptParser.Identifier, 0);
	};

	Yield() {
	    return this.getToken(PScriptParser.Yield, 0);
	};

	Await() {
	    return this.getToken(PScriptParser.Await, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportedBinding(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importDefault;
    }

	aliasName() {
	    return this.getTypedRuleContext(AliasNameContext,0);
	};

	Comma() {
	    return this.getToken(PScriptParser.Comma, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportNamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importNamespace;
    }

	Multiply() {
	    return this.getToken(PScriptParser.Multiply, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(PScriptParser.As, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_importFrom;
    }

	From() {
	    return this.getToken(PScriptParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(PScriptParser.StringLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportFrom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_aliasName;
    }

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(PScriptParser.As, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_exportStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExportDefaultDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(PScriptParser.Export, 0);
	};

	Default() {
	    return this.getToken(PScriptParser.Default, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExportDefaultDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

class ExportDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(PScriptParser.Export, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportFromBlock() {
	    return this.getTypedRuleContext(ExportFromBlockContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	Default() {
	    return this.getToken(PScriptParser.Default, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ExportDeclarationContext = ExportDeclarationContext;

class ExportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_exportFromBlock;
    }

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportModuleItems() {
	    return this.getTypedRuleContext(ExportModuleItemsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_exportModuleItems;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	exportAliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExportAliasNameContext);
	    } else {
	        return this.getTypedRuleContext(ExportAliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExportModuleItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportAliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_exportAliasName;
    }

	moduleExportName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleExportNameContext);
	    } else {
	        return this.getTypedRuleContext(ModuleExportNameContext,i);
	    }
	};

	As() {
	    return this.getToken(PScriptParser.As, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExportAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_declaration;
    }

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_variableStatement;
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitVariableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_variableDeclarationList;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitVariableDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_variableDeclaration;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(PScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(PScriptParser.SemiColon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitEmptyStatement_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(PScriptParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(PScriptParser.Else, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(PScriptParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(PScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(PScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(PScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.SemiColon);
	    } else {
	        return this.getToken(PScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(PScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	In() {
	    return this.getToken(PScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitForInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ForInStatementContext = ForInStatementContext;

class ForOfStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(PScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	Of() {
	    return this.getToken(PScriptParser.Of, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	Await() {
	    return this.getToken(PScriptParser.Await, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitForOfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ForOfStatementContext = ForOfStatementContext;

class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_varModifier;
    }

	Var() {
	    return this.getToken(PScriptParser.Var, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Const() {
	    return this.getToken(PScriptParser.Const, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitVarModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(PScriptParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(PScriptParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(PScriptParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_yieldStatement;
    }

	Yield() {
	    return this.getToken(PScriptParser.Yield, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(PScriptParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(PScriptParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(PScriptParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(PScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(PScriptParser.Default, 0);
	};

	Colon() {
	    return this.getToken(PScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_labelledStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(PScriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLabelledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(PScriptParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(PScriptParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(PScriptParser.Catch, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitCatchProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(PScriptParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFinallyProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(PScriptParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitDebuggerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_functionDeclaration;
    }

	Function_() {
	    return this.getToken(PScriptParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(PScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_classDeclaration;
    }

	Class() {
	    return this.getToken(PScriptParser.Class, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_classTail;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	Extends() {
	    return this.getToken(PScriptParser.Extends, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	classElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassElementContext);
	    } else {
	        return this.getTypedRuleContext(ClassElementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitClassTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_classElement;
    }

	methodDefinition() {
	    return this.getTypedRuleContext(MethodDefinitionContext,0);
	};

	Static() {
	    return this.getToken(PScriptParser.Static, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldDefinition() {
	    return this.getTypedRuleContext(FieldDefinitionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitClassElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_methodDefinition;
    }

	classElementName() {
	    return this.getTypedRuleContext(ClassElementNameContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(PScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitMethodDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_fieldDefinition;
    }

	classElementName() {
	    return this.getTypedRuleContext(ClassElementNameContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_classElementName;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	privateIdentifier() {
	    return this.getTypedRuleContext(PrivateIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitClassElementName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivateIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_privateIdentifier;
    }

	Hashtag() {
	    return this.getToken(PScriptParser.Hashtag, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPrivateIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_formalParameterList;
    }

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	lastFormalParameterArg() {
	    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_formalParameterArg;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(PScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_lastFormalParameterArg;
    }

	Ellipsis() {
	    return this.getToken(PScriptParser.Ellipsis, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLastFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_functionBody;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_sourceElements;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitSourceElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(PScriptParser.OpenBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	CloseBracket() {
	    return this.getToken(PScriptParser.CloseBracket, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_elementList;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	arrayElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayElementContext);
	    } else {
	        return this.getTypedRuleContext(ArrayElementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_arrayElement;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(PScriptParser.Ellipsis, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArrayElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Colon() {
	    return this.getToken(PScriptParser.Colon, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(PScriptParser.OpenBracket, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	CloseBracket() {
	    return this.getToken(PScriptParser.CloseBracket, 0);
	};

	Colon() {
	    return this.getToken(PScriptParser.Colon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitComputedPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(PScriptParser.Ellipsis, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPropertyShorthand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	formalParameterArg() {
	    return this.getTypedRuleContext(FormalParameterArgContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPropertySetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPropertyGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PropertyGetterContext = PropertyGetterContext;

class FunctionPropertyContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(PScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFunctionProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.FunctionPropertyContext = FunctionPropertyContext;

class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(PScriptParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	OpenBracket() {
	    return this.getToken(PScriptParser.OpenBracket, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBracket() {
	    return this.getToken(PScriptParser.CloseBracket, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_argument;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Ellipsis() {
	    return this.getToken(PScriptParser.Ellipsis, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TemplateStringExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitTemplateStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

class TernaryExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(PScriptParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(PScriptParser.Colon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(PScriptParser.And, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PowerExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Power() {
	    return this.getToken(PScriptParser.Power, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPowerExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PowerExpressionContext = PowerExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(PScriptParser.PlusPlus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitObjectLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class MetaExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(PScriptParser.New, 0);
	};

	Dot() {
	    return this.getToken(PScriptParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitMetaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.MetaExpressionContext = MetaExpressionContext;

class InExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(PScriptParser.In, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(PScriptParser.Or, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class OptionalChainExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMarkDot() {
	    return this.getToken(PScriptParser.QuestionMarkDot, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitOptionalChainExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.OptionalChainExpressionContext = OptionalChainExpressionContext;

class NotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(PScriptParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(PScriptParser.MinusMinus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPreDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArgumentsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class AwaitExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Await() {
	    return this.getToken(PScriptParser.Await, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAwaitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.AwaitExpressionContext = AwaitExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(PScriptParser.This, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitThisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anonymousFunction() {
	    return this.getTypedRuleContext(AnonymousFunctionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(PScriptParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitUnaryMinusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Assign() {
	    return this.getToken(PScriptParser.Assign, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(PScriptParser.MinusMinus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPostDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Typeof() {
	    return this.getToken(PScriptParser.Typeof, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Instanceof() {
	    return this.getToken(PScriptParser.Instanceof, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitInstanceofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(PScriptParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitUnaryPlusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(PScriptParser.Delete, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class ImportExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(PScriptParser.Import, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitImportExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ImportExpressionContext = ImportExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(PScriptParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(PScriptParser.NotEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(PScriptParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(PScriptParser.IdentityNotEquals, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(PScriptParser.BitXOr, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBitXOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class SuperExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Super() {
	    return this.getToken(PScriptParser.Super, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitSuperExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.SuperExpressionContext = SuperExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(PScriptParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(PScriptParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(PScriptParser.Modulus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(PScriptParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(PScriptParser.RightShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(PScriptParser.RightShiftLogical, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(PScriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(PScriptParser.Minus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(PScriptParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(PScriptParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(PScriptParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(PScriptParser.GreaterThanEquals, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(PScriptParser.PlusPlus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class YieldExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitYieldExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.YieldExpressionContext = YieldExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(PScriptParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(PScriptParser.New, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArrayLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Dot() {
	    return this.getToken(PScriptParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	QuestionMark() {
	    return this.getToken(PScriptParser.QuestionMark, 0);
	};

	Hashtag() {
	    return this.getToken(PScriptParser.Hashtag, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class ClassExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Class() {
	    return this.getToken(PScriptParser.Class, 0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitClassExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ClassExpressionContext = ClassExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(PScriptParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(PScriptParser.CloseBracket, 0);
	};

	QuestionMarkDot() {
	    return this.getToken(PScriptParser.QuestionMarkDot, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitMemberIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(PScriptParser.BitAnd, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(PScriptParser.BitOr, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBitOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAssignmentOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Void() {
	    return this.getToken(PScriptParser.Void, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitVoidExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.VoidExpressionContext = VoidExpressionContext;

class CoalesceExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	NullCoalesce() {
	    return this.getToken(PScriptParser.NullCoalesce, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitCoalesceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_initializer;
    }

	Assign() {
	    return this.getToken(PScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_assignable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(PScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(PScriptParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.Comma);
	    } else {
	        return this.getToken(PScriptParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnonymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_anonymousFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnonymousFunctionDeclContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Function_() {
	    return this.getToken(PScriptParser.Function_, 0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(PScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAnonymousFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;

class ArrowFunctionContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	ARROW() {
	    return this.getToken(PScriptParser.ARROW, 0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArrowFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

PScriptParser.ArrowFunctionContext = ArrowFunctionContext;

class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_arrowFunctionParameters;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(PScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(PScriptParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArrowFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_arrowFunctionBody;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitArrowFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(PScriptParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(PScriptParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(PScriptParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(PScriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(PScriptParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(PScriptParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(PScriptParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(PScriptParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(PScriptParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(PScriptParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(PScriptParser.BitOrAssign, 0);
	};

	PowerAssign() {
	    return this.getToken(PScriptParser.PowerAssign, 0);
	};

	NullishCoalescingAssign() {
	    return this.getToken(PScriptParser.NullishCoalescingAssign, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_literal;
    }

	NullLiteral() {
	    return this.getToken(PScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(PScriptParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(PScriptParser.StringLiteral, 0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	RegularExpressionLiteral() {
	    return this.getToken(PScriptParser.RegularExpressionLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	bigintLiteral() {
	    return this.getTypedRuleContext(BigintLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_templateStringLiteral;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PScriptParser.BackTick);
	    } else {
	        return this.getToken(PScriptParser.BackTick, i);
	    }
	};


	templateStringAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateStringAtomContext);
	    } else {
	        return this.getTypedRuleContext(TemplateStringAtomContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitTemplateStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_templateStringAtom;
    }

	TemplateStringAtom() {
	    return this.getToken(PScriptParser.TemplateStringAtom, 0);
	};

	TemplateStringStartExpression() {
	    return this.getToken(PScriptParser.TemplateStringStartExpression, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	TemplateCloseBrace() {
	    return this.getToken(PScriptParser.TemplateCloseBrace, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitTemplateStringAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(PScriptParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(PScriptParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(PScriptParser.OctalIntegerLiteral, 0);
	};

	OctalIntegerLiteral2() {
	    return this.getToken(PScriptParser.OctalIntegerLiteral2, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(PScriptParser.BinaryIntegerLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BigintLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_bigintLiteral;
    }

	BigDecimalIntegerLiteral() {
	    return this.getToken(PScriptParser.BigDecimalIntegerLiteral, 0);
	};

	BigHexIntegerLiteral() {
	    return this.getToken(PScriptParser.BigHexIntegerLiteral, 0);
	};

	BigOctalIntegerLiteral() {
	    return this.getToken(PScriptParser.BigOctalIntegerLiteral, 0);
	};

	BigBinaryIntegerLiteral() {
	    return this.getToken(PScriptParser.BigBinaryIntegerLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitBigintLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_getter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classElementName() {
	    return this.getTypedRuleContext(ClassElementNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_setter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classElementName() {
	    return this.getTypedRuleContext(ClassElementNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitSetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_identifierName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitIdentifierName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(PScriptParser.Identifier, 0);
	};

	NonStrictLet() {
	    return this.getToken(PScriptParser.NonStrictLet, 0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	As() {
	    return this.getToken(PScriptParser.As, 0);
	};

	From() {
	    return this.getToken(PScriptParser.From, 0);
	};

	Yield() {
	    return this.getToken(PScriptParser.Yield, 0);
	};

	Of() {
	    return this.getToken(PScriptParser.Of, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(PScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(PScriptParser.BooleanLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(PScriptParser.Break, 0);
	};

	Do() {
	    return this.getToken(PScriptParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(PScriptParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(PScriptParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(PScriptParser.Case, 0);
	};

	Else() {
	    return this.getToken(PScriptParser.Else, 0);
	};

	New() {
	    return this.getToken(PScriptParser.New, 0);
	};

	Var() {
	    return this.getToken(PScriptParser.Var, 0);
	};

	Catch() {
	    return this.getToken(PScriptParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(PScriptParser.Finally, 0);
	};

	Return() {
	    return this.getToken(PScriptParser.Return, 0);
	};

	Void() {
	    return this.getToken(PScriptParser.Void, 0);
	};

	Continue() {
	    return this.getToken(PScriptParser.Continue, 0);
	};

	For() {
	    return this.getToken(PScriptParser.For, 0);
	};

	Switch() {
	    return this.getToken(PScriptParser.Switch, 0);
	};

	While() {
	    return this.getToken(PScriptParser.While, 0);
	};

	Debugger() {
	    return this.getToken(PScriptParser.Debugger, 0);
	};

	Function_() {
	    return this.getToken(PScriptParser.Function_, 0);
	};

	This() {
	    return this.getToken(PScriptParser.This, 0);
	};

	With() {
	    return this.getToken(PScriptParser.With, 0);
	};

	Default() {
	    return this.getToken(PScriptParser.Default, 0);
	};

	If() {
	    return this.getToken(PScriptParser.If, 0);
	};

	Throw() {
	    return this.getToken(PScriptParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(PScriptParser.Delete, 0);
	};

	In() {
	    return this.getToken(PScriptParser.In, 0);
	};

	Try() {
	    return this.getToken(PScriptParser.Try, 0);
	};

	Class() {
	    return this.getToken(PScriptParser.Class, 0);
	};

	Enum() {
	    return this.getToken(PScriptParser.Enum, 0);
	};

	Extends() {
	    return this.getToken(PScriptParser.Extends, 0);
	};

	Super() {
	    return this.getToken(PScriptParser.Super, 0);
	};

	Const() {
	    return this.getToken(PScriptParser.Const, 0);
	};

	Export() {
	    return this.getToken(PScriptParser.Export, 0);
	};

	Import() {
	    return this.getToken(PScriptParser.Import, 0);
	};

	Implements() {
	    return this.getToken(PScriptParser.Implements, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Private() {
	    return this.getToken(PScriptParser.Private, 0);
	};

	Public() {
	    return this.getToken(PScriptParser.Public, 0);
	};

	Interface() {
	    return this.getToken(PScriptParser.Interface, 0);
	};

	Package() {
	    return this.getToken(PScriptParser.Package, 0);
	};

	Protected() {
	    return this.getToken(PScriptParser.Protected, 0);
	};

	Static() {
	    return this.getToken(PScriptParser.Static, 0);
	};

	Yield() {
	    return this.getToken(PScriptParser.Yield, 0);
	};

	Async() {
	    return this.getToken(PScriptParser.Async, 0);
	};

	Await() {
	    return this.getToken(PScriptParser.Await, 0);
	};

	From() {
	    return this.getToken(PScriptParser.From, 0);
	};

	As() {
	    return this.getToken(PScriptParser.As, 0);
	};

	Of() {
	    return this.getToken(PScriptParser.Of, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_let_;
    }

	NonStrictLet() {
	    return this.getToken(PScriptParser.NonStrictLet, 0);
	};

	StrictLet() {
	    return this.getToken(PScriptParser.StrictLet, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitLet_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PScriptParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(PScriptParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(PScriptParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof PScriptParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




PScriptParser.ProgramContext = ProgramContext; 
PScriptParser.SourceElementContext = SourceElementContext; 
PScriptParser.StatementContext = StatementContext; 
PScriptParser.BlockContext = BlockContext; 
PScriptParser.StatementListContext = StatementListContext; 
PScriptParser.ImportStatementContext = ImportStatementContext; 
PScriptParser.ImportFromBlockContext = ImportFromBlockContext; 
PScriptParser.ImportModuleItemsContext = ImportModuleItemsContext; 
PScriptParser.ImportAliasNameContext = ImportAliasNameContext; 
PScriptParser.ModuleExportNameContext = ModuleExportNameContext; 
PScriptParser.ImportedBindingContext = ImportedBindingContext; 
PScriptParser.ImportDefaultContext = ImportDefaultContext; 
PScriptParser.ImportNamespaceContext = ImportNamespaceContext; 
PScriptParser.ImportFromContext = ImportFromContext; 
PScriptParser.AliasNameContext = AliasNameContext; 
PScriptParser.ExportStatementContext = ExportStatementContext; 
PScriptParser.ExportFromBlockContext = ExportFromBlockContext; 
PScriptParser.ExportModuleItemsContext = ExportModuleItemsContext; 
PScriptParser.ExportAliasNameContext = ExportAliasNameContext; 
PScriptParser.DeclarationContext = DeclarationContext; 
PScriptParser.VariableStatementContext = VariableStatementContext; 
PScriptParser.VariableDeclarationListContext = VariableDeclarationListContext; 
PScriptParser.VariableDeclarationContext = VariableDeclarationContext; 
PScriptParser.EmptyStatement_Context = EmptyStatement_Context; 
PScriptParser.ExpressionStatementContext = ExpressionStatementContext; 
PScriptParser.IfStatementContext = IfStatementContext; 
PScriptParser.IterationStatementContext = IterationStatementContext; 
PScriptParser.VarModifierContext = VarModifierContext; 
PScriptParser.ContinueStatementContext = ContinueStatementContext; 
PScriptParser.BreakStatementContext = BreakStatementContext; 
PScriptParser.ReturnStatementContext = ReturnStatementContext; 
PScriptParser.YieldStatementContext = YieldStatementContext; 
PScriptParser.WithStatementContext = WithStatementContext; 
PScriptParser.SwitchStatementContext = SwitchStatementContext; 
PScriptParser.CaseBlockContext = CaseBlockContext; 
PScriptParser.CaseClausesContext = CaseClausesContext; 
PScriptParser.CaseClauseContext = CaseClauseContext; 
PScriptParser.DefaultClauseContext = DefaultClauseContext; 
PScriptParser.LabelledStatementContext = LabelledStatementContext; 
PScriptParser.ThrowStatementContext = ThrowStatementContext; 
PScriptParser.TryStatementContext = TryStatementContext; 
PScriptParser.CatchProductionContext = CatchProductionContext; 
PScriptParser.FinallyProductionContext = FinallyProductionContext; 
PScriptParser.DebuggerStatementContext = DebuggerStatementContext; 
PScriptParser.FunctionDeclarationContext = FunctionDeclarationContext; 
PScriptParser.ClassDeclarationContext = ClassDeclarationContext; 
PScriptParser.ClassTailContext = ClassTailContext; 
PScriptParser.ClassElementContext = ClassElementContext; 
PScriptParser.MethodDefinitionContext = MethodDefinitionContext; 
PScriptParser.FieldDefinitionContext = FieldDefinitionContext; 
PScriptParser.ClassElementNameContext = ClassElementNameContext; 
PScriptParser.PrivateIdentifierContext = PrivateIdentifierContext; 
PScriptParser.FormalParameterListContext = FormalParameterListContext; 
PScriptParser.FormalParameterArgContext = FormalParameterArgContext; 
PScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext; 
PScriptParser.FunctionBodyContext = FunctionBodyContext; 
PScriptParser.SourceElementsContext = SourceElementsContext; 
PScriptParser.ArrayLiteralContext = ArrayLiteralContext; 
PScriptParser.ElementListContext = ElementListContext; 
PScriptParser.ArrayElementContext = ArrayElementContext; 
PScriptParser.PropertyAssignmentContext = PropertyAssignmentContext; 
PScriptParser.PropertyNameContext = PropertyNameContext; 
PScriptParser.ArgumentsContext = ArgumentsContext; 
PScriptParser.ArgumentContext = ArgumentContext; 
PScriptParser.ExpressionSequenceContext = ExpressionSequenceContext; 
PScriptParser.SingleExpressionContext = SingleExpressionContext; 
PScriptParser.InitializerContext = InitializerContext; 
PScriptParser.AssignableContext = AssignableContext; 
PScriptParser.ObjectLiteralContext = ObjectLiteralContext; 
PScriptParser.AnonymousFunctionContext = AnonymousFunctionContext; 
PScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
PScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
PScriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
PScriptParser.LiteralContext = LiteralContext; 
PScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext; 
PScriptParser.TemplateStringAtomContext = TemplateStringAtomContext; 
PScriptParser.NumericLiteralContext = NumericLiteralContext; 
PScriptParser.BigintLiteralContext = BigintLiteralContext; 
PScriptParser.GetterContext = GetterContext; 
PScriptParser.SetterContext = SetterContext; 
PScriptParser.IdentifierNameContext = IdentifierNameContext; 
PScriptParser.IdentifierContext = IdentifierContext; 
PScriptParser.ReservedWordContext = ReservedWordContext; 
PScriptParser.KeywordContext = KeywordContext; 
PScriptParser.Let_Context = Let_Context; 
PScriptParser.EosContext = EosContext; 
